[{"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/App.js":"1","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/components/current/Filters.js":"2","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/components/current/WeatherCurrent.js":"3","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/businessLogic/WeatherBusinessLogic.js":"4","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/index.js":"5","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/store/store.js":"6","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/adapters/WeatherForecastService.js":"7","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/components/forecast/daily/WeatherForecastDaily.js":"8","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/reportWebVitals.js":"9","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/buildingBlocks/commonBuildingBlocks.js":"10"},{"size":557,"mtime":1618255579902,"results":"11","hashOfConfig":"12"},{"size":12444,"mtime":1618241994274,"results":"13","hashOfConfig":"12"},{"size":9092,"mtime":1618255597882,"results":"14","hashOfConfig":"12"},{"size":974,"mtime":1618241994270,"results":"15","hashOfConfig":"12"},{"size":647,"mtime":1618241994274,"results":"16","hashOfConfig":"12"},{"size":1309,"mtime":1618241994274,"results":"17","hashOfConfig":"12"},{"size":562,"mtime":1618241994270,"results":"18","hashOfConfig":"12"},{"size":9934,"mtime":1618255513077,"results":"19","hashOfConfig":"12"},{"size":362,"mtime":1614885697209,"results":"20","hashOfConfig":"12"},{"size":1157,"mtime":1618255463171,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dutmut",{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/App.js",[],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/components/current/Filters.js",["44","45","46"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport i18n from \"i18next\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { nanoid } from \"nanoid\";\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\t\"& > *\": {\n\t\t\tmargin: theme.spacing(1),\n\t\t},\n\t\tdisplay: \"flex\",\n\t\tflexWrap: \"wrap\",\n\t},\n\tmargin: {\n\t\tmargin: theme.spacing(1),\n\t},\n}));\n\nfunction FiltersComponent(props) {\n\tconst [countries, setCountries] = useState([]);\n\tconst [descriptions, setDescriptions] = useState([]);\n\tconst filters = useSelector((filters) => filters);\n\tconst dispatch = useDispatch();\n\tconst classes = useStyles();\n\tprops.countries.then((res) => setCountries(res));\n\tprops.descriptions.then((res) => setDescriptions(res));\n\n\tconst onBlurEvent = (event, filterName, filterOperator) => {\n\t\tdispatch({\n\t\t\ttype: \"UPDATE_FILTERS\",\n\t\t\tvalue: event,\n\t\t\tfilterName: [filterName],\n\t\t\tfilterOperator: [filterOperator],\n\t\t});\n\t};\n\treturn (\n\t\t<form form className={classes.root} noValidate autoComplete=\"off\">\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={String} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.cityName\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"name\"]?.$eq}\n\t\t\t\t\tonBlur={(event) => onBlurEvent(event.target.value, \"name\", \"$eq\")}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl>\n\t\t\t\t<InputLabel variant=\"standard\" type={String} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.latitude\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tfullWidth={false}\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"coord.lat\"]?.$gte}\n\t\t\t\t\tonBlur={(event) =>\n\t\t\t\t\t\tonBlurEvent(event.target.value, \"coord.lat\", \"$gte\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl>\n\t\t\t\t<InputLabel type={String} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.latitude\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"coord.lat\"]?.$lte}\n\t\t\t\t\tonBlur={(event) =>\n\t\t\t\t\t\tonBlurEvent(event.target.value, \"coord.lat\", \"$lte\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl>\n\t\t\t\t<InputLabel type={String} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.longitude\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"coord.lon\"]?.$gte}\n\t\t\t\t\tonBlur={(event) =>\n\t\t\t\t\t\tonBlurEvent(event.target.value, \"coord.lon\", \"$gte\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={String} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.longitude\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"coord.lon\"]?.$lte}\n\t\t\t\t\tonBlur={(event) =>\n\t\t\t\t\t\tonBlurEvent(event.target.value, \"coord.lon\", \"$lte\")\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl\n\t\t\t\tfullWidth={false}\n\t\t\t\tvariant=\"filled\"\n\t\t\t\tsize=\"small\"\n\t\t\t\tfullWidth={false}\n\t\t\t\tvariant=\"filled\"\n\t\t\t\tsize=\"small\"\n\t\t\t>\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.humidity\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\ttype={Number}\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.humidity\"]?.$gte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event && event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(event.target.value),\n\t\t\t\t\t\t\t\t\"weatherMain.humidity\",\n\t\t\t\t\t\t\t\t\"$gte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.humidity\", \"$gte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.humidity\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\ttype={Number}\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.humidity\"]?.$lte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event && event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(event.target.value),\n\t\t\t\t\t\t\t\t\"weatherMain.humidity\",\n\t\t\t\t\t\t\t\t\"$lte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.humidity\", \"$lte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.feelTemperature\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.feels_like\"]?.$gte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event && event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.feels_like\",\n\t\t\t\t\t\t\t\t\"$gte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.feels_like\", \"$gte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.feelTemperature\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.feels_like\"]?.$lte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event && event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.feels_like\",\n\t\t\t\t\t\t\t\t\"$lte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.feels_like\", \"$lte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={String} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.temperatureMax\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid=\"component-simple\"\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.temp_max\"]?.$gte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.temp_max\",\n\t\t\t\t\t\t\t\t\"$gte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.temp_max\", \"$gte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.temperatureMax\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.temp_max\"]?.$lte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.temp_max\",\n\t\t\t\t\t\t\t\t\"$lte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.temp_max\", \"$lte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.temperatureMin\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.temp_min\"]?.$gte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.temp_min\",\n\t\t\t\t\t\t\t\t\"$gte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.temp_min\", \"$gte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.temperatureMin\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.temp_min\"]?.$lte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.temp_min\",\n\t\t\t\t\t\t\t\t\"$lte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.temp_min\", \"$lte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.temperature\")} {i18n.t(\"common.from\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.from\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.temp\"]?.$gte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.temp\",\n\t\t\t\t\t\t\t\t\"$gte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.temp\", \"$gte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl fullWidth={false} variant=\"filled\" size=\"small\">\n\t\t\t\t<InputLabel type={Number} htmlFor=\"component-simple\">\n\t\t\t\t\t{i18n.t(\"current.filters.temperature\")} {i18n.t(\"common.to\")}\n\t\t\t\t</InputLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder={i18n.t(\"common.to\")}\n\t\t\t\t\tid={nanoid()}\n\t\t\t\t\tdefaultValue={filters[\"weatherMain.temp\"]?.$lte}\n\t\t\t\t\tonBlur={(event) => {\n\t\t\t\t\t\tif (event.target.value !== \"\")\n\t\t\t\t\t\t\treturn onBlurEvent(\n\t\t\t\t\t\t\t\tparseFloat(\n\t\t\t\t\t\t\t\t\tcalculateKelvins(props.temperatureUnits, event.target.value)\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\"weatherMain.temp\",\n\t\t\t\t\t\t\t\t\"$lte\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse return onBlurEvent(\"\", \"weatherMain.temp\", \"$lte\");\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<Multiselect\n\t\t\t\tselectedValues={getSelectedDescriptions(\n\t\t\t\t\tfilters[\"weather.description\"]?.$in,\n\t\t\t\t\tdescriptions\n\t\t\t\t)}\n\t\t\t\tplaceholder={i18n.t(\"current.filters.pickDescriptions\")}\n\t\t\t\toptions={descriptions}\n\t\t\t\tdisplayValue=\"name\"\n\t\t\t\tonSelect={(event) => {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"UPDATE_FILTERS\",\n\t\t\t\t\t\tvalue: event.map((desc) => desc.originalValue),\n\t\t\t\t\t\tfilterName: \"weather.description\",\n\t\t\t\t\t\tfilterOperator: \"$in\",\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tonRemove={(event) => {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"UPDATE_FILTERS\",\n\t\t\t\t\t\tvalue: event.map((desc) => desc.originalValue),\n\t\t\t\t\t\tfilterName: \"weather.description\",\n\t\t\t\t\t\tfilterOperator: \"$in\",\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Multiselect\n\t\t\t\tselectedValues={getSelectedCountries(\n\t\t\t\t\tfilters[\"sys.countryName\"]?.$in,\n\t\t\t\t\tcountries\n\t\t\t\t)}\n\t\t\t\tplaceholder={i18n.t(\"current.filters.pickCountries\")}\n\t\t\t\toptions={countries}\n\t\t\t\tdisplayValue=\"countryName\"\n\t\t\t\tonSelect={(event) => {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"UPDATE_FILTERS\",\n\t\t\t\t\t\tvalue: event.map((country) => country.originalCountryName),\n\t\t\t\t\t\tfilterName: \"sys.countryName\",\n\t\t\t\t\t\tfilterOperator: \"$in\",\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tonRemove={(event) => {\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: \"UPDATE_FILTERS\",\n\t\t\t\t\t\tvalue: event.map((country) => country.originalCountryName),\n\t\t\t\t\t\tfilterName: \"sys.countryName\",\n\t\t\t\t\t\tfilterOperator: \"$in\",\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t/>\n\t\t</form>\n\t);\n}\n\nconst getSelectedDescriptions = (descriptionValues, descriptions) => {\n\tif (Array.isArray(descriptionValues)) {\n\t\treturn descriptions.filter((d) =>\n\t\t\tdescriptionValues.includes(d.originalValue)\n\t\t);\n\t}\n\treturn {};\n};\n\nconst getSelectedCountries = (countryValues, countries) => {\n\tif (countryValues !== undefined && Array.isArray(countryValues))\n\t\treturn countries.filter((c) =>\n\t\t\tcountryValues.includes(c.originalCountryName)\n\t\t);\n\treturn {};\n};\n\n// In db values are in kelvin. The user can change it on the UI.\n// I must convert to same units\nconst calculateKelvins = (temperatureUnits, temperatureValue) => {\n\tif (temperatureValue === \"\") return \"\";\n\tif (temperatureUnits === \"celsius\")\n\t\treturn (parseFloat(temperatureValue) + 273.15).toString();\n\tif (temperatureUnits === \"fahrenheit\")\n\t\treturn (((parseFloat(temperatureValue) + 459.67) * 5) / 9).toString();\n\treturn temperatureValue;\n};\n\nexport default FiltersComponent;\n","/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/components/current/WeatherCurrent.js",["47"],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/businessLogic/WeatherBusinessLogic.js",[],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/index.js",[],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/store/store.js",[],["48","49"],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/adapters/WeatherForecastService.js",[],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/components/forecast/daily/WeatherForecastDaily.js",["50"],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/reportWebVitals.js",[],"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/ui/src/buildingBlocks/commonBuildingBlocks.js",[],{"ruleId":"51","severity":1,"message":"52","line":110,"column":5,"nodeType":"53","endLine":110,"endColumn":22},{"ruleId":"51","severity":1,"message":"52","line":111,"column":5,"nodeType":"53","endLine":111,"endColumn":21},{"ruleId":"51","severity":1,"message":"52","line":112,"column":5,"nodeType":"53","endLine":112,"endColumn":17},{"ruleId":"54","severity":1,"message":"55","line":76,"column":5,"nodeType":"56","endLine":76,"endColumn":53,"suggestions":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"62","line":60,"column":5,"nodeType":"56","endLine":65,"endColumn":3,"suggestions":"63"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshWeathers'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"React Hook useEffect has a missing dependency: 'dailyWeatherForecast.daily'. Either include it or remove the dependency array.",["67"],{"desc":"68","fix":"69"},"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [currentPage, itemsPerPage, sortBy, isAscending, refreshWeathers]",{"range":"72","text":"73"},"Update the dependencies array to be: [isAscending, sortBy, props.history.location.state.lat, props.history.location.state.lon, dailyWeatherForecast.daily]",{"range":"74","text":"75"},[2232,2280],"[currentPage, itemsPerPage, sortBy, isAscending, refreshWeathers]",[1926,2027],"[isAscending, sortBy, props.history.location.state.lat, props.history.location.state.lon, dailyWeatherForecast.daily]"]