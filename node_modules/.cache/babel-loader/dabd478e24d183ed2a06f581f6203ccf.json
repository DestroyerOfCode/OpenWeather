{"ast":null,"code":"import i18n from 'i18next';\nexport const getWeatherDescription = weather => {\n  var weatherItemReduce = (prevVal, currVal, idx) => {\n    // console.log(\"currVal.description: \" + currVal.description)\n    return idx === 0 ? i18n.t(`common.description.${currVal.description}`) : `${prevVal}` + \", \" + i18n.t(`common.description.${currVal.description}`);\n  };\n\n  return weather.weather.reduce(weatherItemReduce, '');\n};\nexport const displayDateTime = dateTime => {\n  return dateTime.toLocaleString(\"sk-SK\");\n};\nexport const convertTemperature = (convertTo, temp) => {\n  // console.log(convertTo)\n  if (convertTo === \"celsius\") return temp - 273.15;else if (convertTo === \"fahrenheit\") return (temp - 273.15) * 1.8 + 32;else return temp;\n};\nexport const keyExistsInArr = (arr, key) => {\n  let exists = false;\n\n  if (!Array.isArray(key)) {\n    arr === null || arr === void 0 ? void 0 : arr.some(item => {\n      if (item.hasOwnProperty([key])) {\n        exists = true;\n        return true;\n      } else return false;\n    });\n  } //since countries and descriptions is a multicheckbox, they are arrays and it has multiple keys and must check not with equals\n  else {\n      arr === null || arr === void 0 ? void 0 : arr.some(item => {\n        if (item.includes([key])) {\n          exists = true;\n          return true;\n        } else return false;\n      });\n    }\n\n  return exists;\n};\nexport const findIndexInFilters = (filters, key) => {\n  let indexOfKey = 0;\n  filters === null || filters === void 0 ? void 0 : filters.some((filterName, index, filters) => {\n    if (filterName.hasOwnProperty([key])) {\n      indexOfKey = index;\n      return indexOfKey;\n    } else return false;\n  });\n  return indexOfKey;\n};\nexport const changeFilters = (index, filterName, filterOperator, filters) => {\n  if (filters[index][filterName][filterOperator]) delete filters[index][filterName][filterOperator];\n  if (Object.keys(filters[index][filterName]).length === 0) filters.splice(index, 1);\n  return filters;\n};\nexport const addFilterOperatorToExistingFilterName = (event, filterName, filterOperator, filters) => {\n  filters.forEach((item, index, filters) => {\n    if (item.hasOwnProperty([filterName])) {\n      filters[index][filterName][filterOperator] = event;\n    }\n  });\n  return filters;\n};\nexport const isAdditionalFilterCheck = (event, index, filterName, filters) => {\n  if (isNotAdditionalFilterWithContains(event) === false) return false;\n  if (isSameFilterChanged(index, filterName, filters) === false) return false;\n  return true;\n}; //if there are multiple countries and descriptions, backend must make a new query\n//since no additional filter is added, only value. I am unable to send query request\n//with an array element\n\nexport const isNotAdditionalFilterWithContains = event => {\n  return event.includes(\",\") ? false : true;\n}; // this check is here for times when I change the same filter multiple\n// times in a row and the filter is same. If it is the same I cant filter\n// from memory because I could not load some weathers\n\nexport const isSameFilterChanged = (index, filterName, filters) => {\n  return filterName === filters[index][filterName];\n};\nexport const displayCoords = coord => {\n  return typeof coord === 'string' ? parseFloat(coord).toFixed(2) : coord.toFixed(2);\n};","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/businessLogic/WeatherBusinessLogic.js"],"names":["i18n","getWeatherDescription","weather","weatherItemReduce","prevVal","currVal","idx","t","description","reduce","displayDateTime","dateTime","toLocaleString","convertTemperature","convertTo","temp","keyExistsInArr","arr","key","exists","Array","isArray","some","item","hasOwnProperty","includes","findIndexInFilters","filters","indexOfKey","filterName","index","changeFilters","filterOperator","Object","keys","length","splice","addFilterOperatorToExistingFilterName","event","forEach","isAdditionalFilterCheck","isNotAdditionalFilterWithContains","isSameFilterChanged","displayCoords","coord","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import i18n from 'i18next'\nexport const getWeatherDescription = (weather) => {\n    var weatherItemReduce = (prevVal, currVal, idx) => {\n        // console.log(\"currVal.description: \" + currVal.description)\n        return idx === 0 ? i18n.t(`common.description.${currVal.description}`) : (`${prevVal}`) + \", \" + i18n.t(`common.description.${currVal.description}`);\n    }\n    return weather.weather.reduce(weatherItemReduce, '')\n}\n\nexport const displayDateTime = (dateTime) => {\n    return dateTime.toLocaleString(\"sk-SK\")\n}\n\nexport const convertTemperature = (convertTo, temp) => {\n    // console.log(convertTo)\n    if (convertTo === \"celsius\")\n        return temp - 273.15\n    else if (convertTo === \"fahrenheit\")\n        return (temp -273.15) * 1.8 + 32\n    else return temp\n}\n\n\nexport const keyExistsInArr = (arr, key) => {\n    let exists = false\n    if (!Array.isArray(key)){\n        arr?.some(item => {\n            if(item.hasOwnProperty([key])) {\n                exists = true;\n                return true\n            }\n            else return false\n        })\n    }\n    //since countries and descriptions is a multicheckbox, they are arrays and it has multiple keys and must check not with equals\n    else{\n        arr?.some(item => {\n            if(item.includes([key])) {\n                exists = true;\n                return true\n            }\n            else return false\n        })\n    }\n    return exists\n}\n\nexport const findIndexInFilters = (filters, key) => {\n    let indexOfKey = 0\n    filters?.some((filterName, index, filters) => {\n        if(filterName.hasOwnProperty([key])){ \n            indexOfKey = index\n            return indexOfKey\n        }\n        else return false\n    })\n    return indexOfKey\n}\n\nexport const changeFilters = (index, filterName, filterOperator, filters)  => {\n\n    if (filters[index][filterName][filterOperator])\n        delete filters[index][filterName][filterOperator]  \n    if (Object.keys(filters[index][filterName]).length === 0)\n        filters.splice(index, 1)\n    return filters\n}\n\nexport const addFilterOperatorToExistingFilterName = (event, filterName, filterOperator, filters) => {\n    filters.forEach((item, index, filters) => {\n        if (item.hasOwnProperty([filterName])){\n            filters[index][filterName][filterOperator] = event\n        }\n    })\n    return filters\n}\n\nexport const isAdditionalFilterCheck = (event, index, filterName, filters) => {\n    if (isNotAdditionalFilterWithContains(event) === false)\n        return false\n    if (isSameFilterChanged( index, filterName, filters ) === false)\n        return false\n    return true\n            \n}   \n\n//if there are multiple countries and descriptions, backend must make a new query\n//since no additional filter is added, only value. I am unable to send query request\n//with an array element\nexport const isNotAdditionalFilterWithContains = (event) => {\n   return event.includes(\",\") ? false : true\n}\n\n// this check is here for times when I change the same filter multiple\n// times in a row and the filter is same. If it is the same I cant filter\n// from memory because I could not load some weathers\nexport const isSameFilterChanged = (index, filterName, filters ) => {\n   return filterName === filters[index][filterName]\n}\n\nexport const  displayCoords = (coord) => {\n    return typeof coord === 'string' ? parseFloat(coord).toFixed(2) :  coord.toFixed(2)\n}"]},"metadata":{},"sourceType":"module"}