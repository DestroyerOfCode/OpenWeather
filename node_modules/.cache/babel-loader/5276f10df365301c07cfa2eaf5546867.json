{"ast":null,"code":"import axios from 'axios';\nconst COURSE_API_URL = 'http://localhost:8080';\nconst WEATHER_API_URL = `${COURSE_API_URL}/weather`;\n\nclass WeatherService {\n  retrieveAllWeathers(sortBy, isAscending, filters, filterOperator, isFilter, weathers) {\n    var filterString = this.buildFilterString(filters, filterOperator);\n\n    var qs = require('qs'); // console.log(\"filters?.length: \" + filters?.length)\n    //    console.log(JSON.stringify(filters))\n\n\n    if (!weathers) weathers = []; // console.log(\"weathers: \" + JSON.stringify(weathers))\n\n    const params = {\n      sortBy,\n      isAscending,\n      isFilter,\n      filterOperator\n    }; // console.log(\"params: \" + JSON.stringify(params) )\n\n    console.log(\"filters: \" + JSON.stringify(filters));\n    return axios.post(`${WEATHER_API_URL}/retrieve/fromDb`, weathers, {\n      params,\n      paramsSerializer: params => {\n        return qs.stringify(filtersWS);\n      }\n    });\n  }\n\n  buildFilterString(filters, filterOperator) {\n    var filterString = \"\";\n\n    for (var i = 0; i <= (filters === null || filters === void 0 ? void 0 : filters.length) - 1; ++i) {\n      filterString += JSON.stringify({\n        \"filteringNode\": filters[i].filteringNode,\n        \"filterOperator\": filters[i].filterOperator\n      });\n      if (filters[i + 1]) filterString += \",\"; // console.log(\"filters[i]: \" + JSON.stringify(filters[i]))\n    }\n\n    filterString = \"[\" + filterString + \"]\";\n    return filterString;\n  }\n\n}\n\nexport default new WeatherService();","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/service/WeatherService.js"],"names":["axios","COURSE_API_URL","WEATHER_API_URL","WeatherService","retrieveAllWeathers","sortBy","isAscending","filters","filterOperator","isFilter","weathers","filterString","buildFilterString","qs","require","params","console","log","JSON","stringify","post","paramsSerializer","filtersWS","i","length","filteringNode"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG,uBAAvB;AACA,MAAMC,eAAe,GAAI,GAAED,cAAe,UAA1C;;AAEA,MAAME,cAAN,CAAqB;AAEjBC,EAAAA,mBAAmB,CAACC,MAAD,EAASC,WAAT,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+CC,QAA/C,EAAyDC,QAAzD,EAAmE;AAClF,QAAIC,YAAY,GAAG,KAAKC,iBAAL,CAAuBL,OAAvB,EAAgCC,cAAhC,CAAnB;;AACA,QAAIK,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB,CAFkF,CAIlF;AACJ;;;AACI,QAAG,CAACJ,QAAJ,EACIA,QAAQ,GAAG,EAAX,CAP8E,CAQ9E;;AACJ,UAAMK,MAAM,GAAG;AACXV,MAAAA,MADW;AACHC,MAAAA,WADG;AACUG,MAAAA,QADV;AACoBD,MAAAA;AADpB,KAAf,CATkF,CAalF;;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAA1B;AACA,WAAOP,KAAK,CAACoB,IAAN,CAAY,GAAElB,eAAgB,kBAA9B,EAAiDQ,QAAjD,EAA0D;AAACK,MAAAA,MAAD;AAASM,MAAAA,gBAAgB,EAAEN,MAAM,IAAI;AAAE,eAAOF,EAAE,CAACM,SAAH,CAAaG,SAAb,CAAP;AAA+B;AAAtE,KAA1D,CAAP;AACH;;AAEDV,EAAAA,iBAAiB,CAACL,OAAD,EAAUC,cAAV,EAAyB;AACtC,QAAIG,YAAY,GAAG,EAAnB;;AACA,SAAI,IAAIY,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAAAhB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEiB,MAAT,IAAgB,CAApC,EAAuC,EAAED,CAAzC,EAA2C;AACvCZ,MAAAA,YAAY,IAAGO,IAAI,CAACC,SAAL,CAAe;AAAC,yBAAkBZ,OAAO,CAACgB,CAAD,CAAP,CAAWE,aAA9B;AAA6C,0BAAmBlB,OAAO,CAACgB,CAAD,CAAP,CAAWf;AAA3E,OAAf,CAAf;AACA,UAAID,OAAO,CAACgB,CAAC,GAAC,CAAH,CAAX,EACIZ,YAAY,IAAI,GAAhB,CAHmC,CAIvC;AACH;;AACDA,IAAAA,YAAY,GAAG,MAAMA,YAAN,GAAqB,GAApC;AACA,WAAOA,YAAP;AACH;;AA9BgB;;AAgCrB,eAAe,IAAIR,cAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst COURSE_API_URL = 'http://localhost:8080'\nconst WEATHER_API_URL = `${COURSE_API_URL}/weather`\n\nclass WeatherService {\n\n    retrieveAllWeathers(sortBy, isAscending, filters, filterOperator, isFilter, weathers) {\n        var filterString = this.buildFilterString(filters, filterOperator)\n        var qs = require('qs')\n\n        // console.log(\"filters?.length: \" + filters?.length)\n    //    console.log(JSON.stringify(filters))\n        if(!weathers)\n            weathers = []\n            // console.log(\"weathers: \" + JSON.stringify(weathers))\n        const params = {\n            sortBy, isAscending, isFilter, filterOperator\n        }\n\n        // console.log(\"params: \" + JSON.stringify(params) )\n        console.log(\"filters: \" + JSON.stringify(filters))\n        return axios.post(`${WEATHER_API_URL}/retrieve/fromDb`, weathers,{params, paramsSerializer: params => { return qs.stringify(filtersWS)}});\n    }\n\n    buildFilterString(filters, filterOperator){\n        var filterString = \"\"\n        for(var i = 0; i <= filters?.length-1; ++i){\n            filterString+= JSON.stringify({\"filteringNode\" : filters[i].filteringNode, \"filterOperator\" : filters[i].filterOperator});\n            if (filters[i+1])\n                filterString += \",\"\n            // console.log(\"filters[i]: \" + JSON.stringify(filters[i]))\n        }\n        filterString = \"[\" + filterString + \"]\"\n        return filterString\n    }\n}\nexport default new WeatherService()\n"]},"metadata":{},"sourceType":"module"}