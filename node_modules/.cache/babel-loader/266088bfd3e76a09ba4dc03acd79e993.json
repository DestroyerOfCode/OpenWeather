{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/component/WeatherForecastComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport WeatherForecastService from '../service/WeatherForecastService';\n\nfunction WeatherForecastComponent(props) {\n  _s();\n\n  console.log(\"som vo forecast component\");\n  console.log(\"props: \" + JSON.stringify(props.history.location.state));\n  const [dailyWeatherForecast, setDailyWeatherForecast] = useState({});\n  useEffect(() => {\n    console.log(\"som v useEffect forecast component\");\n    console.log(\"func: \")(getDailyWeatherForecast(props.history.location.state.lat, props.history.location.state.lon).then(response => {\n      // console.log(\"response.data: \" + JSON.stringify(response.data))\n      setDailyWeatherForecast(response.data);\n    }));\n  }, [dailyWeatherForecast]);\n  console.log(\"dailyWeatherForecast: \" + JSON.stringify(dailyWeatherForecast));\n\n  for (var key in dailyWeatherForecast) {\n    var _dailyWeatherForecast;\n\n    if (hasOwnProperty.call(dailyWeatherForecast, key)) return /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: (_dailyWeatherForecast = dailyWeatherForecast.data.daily) === null || _dailyWeatherForecast === void 0 ? void 0 : _dailyWeatherForecast.map(weatherForecast => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weatherForecast.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 25\n          }, this)\n        }, WeatherForecastComponent.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this);else return;\n  }\n}\n\n_s(WeatherForecastComponent, \"bJ5teWGutBLkVhno6XsU0CImiiw=\");\n\n_c = WeatherForecastComponent;\n\nconst getDailyWeatherForecast = async (lat, lon) => {\n  console.log(\"som v metode getDailyWeatherForecast\");\n  const dailyWeatherForecastFunc = await WeatherForecastService.getDailyForecastByCityName(lat, lon, \"Current,Hourly,Minutely\");\n  console.log(\"dailyWeatherForecastFunc: \" + JSON.stringify(dailyWeatherForecastFunc));\n  return dailyWeatherForecastFunc;\n};\n\nexport default WeatherForecastComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecastComponent\");","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/component/WeatherForecastComponent.js"],"names":["React","useState","useEffect","WeatherForecastService","WeatherForecastComponent","props","console","log","JSON","stringify","history","location","state","dailyWeatherForecast","setDailyWeatherForecast","getDailyWeatherForecast","lat","lon","then","response","data","key","hasOwnProperty","call","daily","map","weatherForecast","id","dailyWeatherForecastFunc","getDailyForecastByCityName"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;;AAEA,SAASC,wBAAT,CAAkCC,KAAlC,EAAwC;AAAA;;AAEpCC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAtC,CAAxB;AAEA,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDb,QAAQ,CAAC,EAAD,CAAhE;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACXI,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EACCQ,uBAAuB,CAACV,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAvB,CAA6BI,GAA9B,EAAmCX,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAvB,CAA6BK,GAAhE,CAAvB,CAA4FC,IAA5F,CACGC,QAAQ,IAAI;AACR;AACAL,MAAAA,uBAAuB,CAACK,QAAQ,CAACC,IAAV,CAAvB;AACH,KAJJ,CADD;AAOH,GATQ,EASN,CAACP,oBAAD,CATM,CAAT;AAWAP,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BC,IAAI,CAACC,SAAL,CAAeI,oBAAf,CAAvC;;AACA,OAAK,IAAIQ,GAAT,IAAgBR,oBAAhB;AAAA;;AACI,QAAKS,cAAc,CAACC,IAAf,CAAoBV,oBAApB,EAA0CQ,GAA1C,CAAL,EACA,oBAAQ;AAAA,yCACJR,oBAAoB,CAACO,IAArB,CAA0BI,KADtB,0DACJ,sBAAiCC,GAAjC,CACIC,eAAe,IAAG;AACd,4BAAQ;AAAA,iCACJ;AAAA,sBAAKA,eAAe,CAACC;AAArB;AAAA;AAAA;AAAA;AAAA;AADI,WAAUvB,wBAAwB,CAACuB,EAAnC;AAAA;AAAA;AAAA;AAAA,gBAAR;AAGE,OALV;AADI;AAAA;AAAA;AAAA;AAAA,YAAR,CADA,KAUK;AAXT;AAYH;;GA/BQvB,wB;;KAAAA,wB;;AAiCT,MAAMW,uBAAuB,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAChDX,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,QAAMqB,wBAAwB,GAAG,MAAMzB,sBAAsB,CAAC0B,0BAAvB,CAAkDb,GAAlD,EAAuDC,GAAvD,EAA4D,yBAA5D,CAAvC;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BC,IAAI,CAACC,SAAL,CAAemB,wBAAf,CAA3C;AACA,SAAOA,wBAAP;AACH,CALD;;AAMA,eAAexB,wBAAf","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport WeatherForecastService from '../service/WeatherForecastService';\n\nfunction WeatherForecastComponent(props){\n\n    console.log(\"som vo forecast component\")\n    console.log(\"props: \" + JSON.stringify(props.history.location.state))\n\n    const [dailyWeatherForecast, setDailyWeatherForecast] = useState({})\n    \n    useEffect(() =>{\n        console.log(\"som v useEffect forecast component\")\n        console.log(\"func: \" )\n        (getDailyWeatherForecast(props.history.location.state.lat, props.history.location.state.lon).then(\n            response => {\n                // console.log(\"response.data: \" + JSON.stringify(response.data))\n                setDailyWeatherForecast(response.data)\n            }\n        ));\n    }, [dailyWeatherForecast])\n\n    console.log(\"dailyWeatherForecast: \" + JSON.stringify(dailyWeatherForecast))\n    for (var key in dailyWeatherForecast)\n        if ( hasOwnProperty.call(dailyWeatherForecast, key))\n        return (<tbody>{\n            dailyWeatherForecast.data.daily?.map( \n                weatherForecast =>{\n                    return (<tr key ={WeatherForecastComponent.id}>\n                        <td>{weatherForecast.id}</td>\n                        </tr>\n                    )}\n            )\n        }</tbody>)\n        else return ;\n}\n\nconst getDailyWeatherForecast = async (lat, lon) => {\n    console.log(\"som v metode getDailyWeatherForecast\")\n    const dailyWeatherForecastFunc = await WeatherForecastService.getDailyForecastByCityName(lat, lon, \"Current,Hourly,Minutely\")\n    console.log(\"dailyWeatherForecastFunc: \" + JSON.stringify(dailyWeatherForecastFunc))\n    return dailyWeatherForecastFunc\n}\nexport default WeatherForecastComponent"]},"metadata":{},"sourceType":"module"}