{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/components/current/WeatherCurrent.js\";\nimport React from 'react';\nimport WeatherCurrentService from '../../adapters/WeatherCurrentService';\nimport Pagination from '../current/Pagination';\nimport FiltersComponent from './Filters';\nimport { Link } from \"react-router-dom\";\nimport { internationalizeDescriptions, getWeatherDescription, convertTemperature, internationalizeCountries, keyExistsInArr, findIndexInFilters } from '../../businessLogic/WeatherBusinessLogic';\nimport '../../styles/common/Header.scss';\nimport { nanoid } from \"nanoid\";\nimport { connect } from 'react-redux';\nimport { saveFilter } from '../../actions';\nimport i18n from 'i18next';\n\nclass WeatherCurrent extends React.Component {\n  constructor(props) {\n    console.log(props.temperature);\n    super(props);\n\n    this.addFilterOperatorToExistingFilterName = (event, filterName, filterOperator) => {\n      const arr = this.state.filters;\n      arr.forEach((item, index, filters) => {\n        if (item.hasOwnProperty([filterName])) {\n          filters[index][filterName][filterOperator] = event;\n        }\n      });\n      return arr;\n    };\n\n    this.onChangeFilter = (event, filterName, filterOperator) => {\n      var index;\n\n      if (event === \"\" && keyExistsInArr(this.state.filters, filterName)) {\n        index = findIndexInFilters(this.state.filters, filterName);\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: false,\n          filters: this.removeFilter(index, filterName, filterOperator)\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else if (event !== \"\" && !keyExistsInArr(this.state.filters, filterName)) {\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: true,\n          filters: this.state.filters.concat([{\n            [filterName]: {\n              [filterOperator]: event\n            }\n          }])\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else if (event !== \"\" && keyExistsInArr(this.state.filters, filterName)) {\n        index = findIndexInFilters(this.state.filters, filterName);\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: this.isAdditionalFilterCheck(event, index, filterName, filterOperator),\n          filters: this.addFilterOperatorToExistingFilterName(event, filterName, filterOperator)\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else {}\n    };\n\n    this.createForecast = () => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.paginate = page => {\n      // if(currentPage !== 0 && currentPage <= lastPage)\n      this.setState({\n        currentPage: page\n      }, function () {});\n    };\n\n    this.getWeathersOnSpecificPage = () => {\n      const indexOfLastPost = this.state.currentPage * this.state.itemsPerPage;\n      const indexOfFirstPost = indexOfLastPost - this.state.itemsPerPage;\n      return this.state.weathers.slice(indexOfFirstPost, indexOfLastPost);\n    };\n\n    this.changeLanguage = (language, i18n) => {\n      i18n.changeLanguage(language);\n      this.setState({}, () => {\n        this.setState({\n          language: language\n        });\n      });\n    };\n\n    this.state = {\n      weathers: [],\n      isAscending: true,\n      filters: [],\n      isFilter: false,\n      currentPage: 1,\n      itemsPerPage: 1000,\n      loading: false,\n      isAdditionalFilter: false,\n      pageNumbers: [],\n      countries: [],\n      descriptions: [],\n      showPages: 5,\n      language: i18n.language,\n      filterComponent: null,\n      temperature: props.temperature\n    };\n  } //I added temperatureDropdownList, filterscomponent and header here because I do not want to rerender them\n  //on every update. I cant use shouldComponentUpdate because they either are not components or are functional\n  //meaning they are stateless\n\n\n  async componentDidMount() {\n    console.log(\"componentDidMount\");\n    console.log(this.state.temperature);\n    const countries = await WeatherCurrentService.retrieveAllCountries();\n    const descriptions = await WeatherCurrentService.retrieveAllDescriptions();\n    this.setState({\n      countries: countries.data,\n      descriptions: descriptions.data,\n      filterComponent: /*#__PURE__*/_jsxDEV(FiltersComponent, {\n        temperatureUnits: this.state.temperature.units,\n        countries: internationalizeCountries(countries.data),\n        descriptions: internationalizeDescriptions(descriptions.data),\n        onChangeMethod: this.onChangeFilter\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 30\n      }, this)\n    }, function () {\n      this.refreshWeathers();\n    });\n  }\n\n  refreshWeathers(sortBy, weathers) {\n    WeatherCurrentService.retrieveAllWeathers(sortBy, this.state.isAscending, this.state.filters, this.state.isFilter, this.state.isAdditionalFilter, weathers).then(response => {\n      this.setState({\n        weathers: response.data\n      });\n    }).then(() => {\n      if (sortBy) this.setState({\n        isAscending: !this.state.isAscending\n      });\n    }).then(() => {\n      if (typeof this.state.filters !== 'undefined' && this.state.filters === 0) this.setState({\n        isFilter: false\n      });\n    });\n  }\n\n  removeFilter(index, filterName, filterOperator) {\n    let arr = this.state.filters;\n    if (arr[index][filterName][filterOperator]) delete arr[index][filterName][filterOperator];\n    if (Object.keys(arr[index][filterName]).length === 0) arr.splice(index, 1);\n    return arr;\n  }\n\n  isAdditionalFilterCheck(event, index, filterName, filterOperator) {\n    if (this.isNotAdditionalFilterWithContains(event) === false) return false;\n    if (this.isSameFilterChanged(event, index, filterName, filterOperator) === false) return false;\n    return true;\n  } //if there are multiple countries and descriptions, backend must make a new query\n  //since no additional filter is added, only value. I am unable to send query request\n  //with an array element\n\n\n  isNotAdditionalFilterWithContains(event) {\n    return event.includes(\",\") ? false : true;\n  } // this check is here for times when I change the same filter multiple\n  // times in a row and the filter is same. If it is the same I cant filter\n  // from memory because I could not load some weathers\n\n\n  isSameFilterChanged(event, index, filterName, filterOperator) {\n    return filterName === this.state.filters[index][filterName];\n  }\n\n  header() {\n    return /*#__PURE__*/_jsxDEV(\"thead\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"_id\", this.state.weathers),\n          children: i18n.t(\"current.header.cityId\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"name\", this.state.weathers),\n          children: i18n.t('current.header.cityName')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"coord.lat\", this.state.weathers),\n          children: i18n.t(\"current.header.latitude\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"coord.lon\", this.state.weathers),\n          children: i18n.t(\"current.header.longitude\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"sys.countryName\", this.state.weathers),\n          children: i18n.t(\"current.header.country\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.humidity\", this.state.weathers),\n          children: i18n.t(\"current.header.humidity\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.feels_like\", this.state.weathers),\n          children: i18n.t(\"current.header.feelsLike\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp\", this.state.weathers),\n          children: i18n.t(\"current.header.temperature\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp_max\", this.state.weathers),\n          children: i18n.t(\"current.header.maximumTemperature\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp_min\", this.state.weathers),\n          children: i18n.t(\"current.header.minimalTemperature\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weather.description\", this.state.weathers),\n          children: i18n.t(\"current.header.description\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 16\n    }, this);\n  }\n\n  mainBody(currentPosts, temperature) {\n    console.log(temperature.units);\n    return /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: currentPosts.map(weather => {\n        var _convertTemperature, _convertTemperature2, _convertTemperature3, _convertTemperature4;\n\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n              to: {\n                pathname: \"/forecast\",\n                state: {\n                  \"lat\": weather.coord.lat,\n                  \"lon\": weather.coord.lon\n                }\n              },\n              children: weather.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.coord.lat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.coord.lon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: i18n.t(`common.countryName.${weather.sys.countryName}`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.humidity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${(_convertTemperature = convertTemperature(temperature.units, weather.weatherMain.feels_like)) === null || _convertTemperature === void 0 ? void 0 : _convertTemperature.toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${(_convertTemperature2 = convertTemperature(temperature.units, weather.weatherMain.temp)) === null || _convertTemperature2 === void 0 ? void 0 : _convertTemperature2.toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${(_convertTemperature3 = convertTemperature(temperature.units, weather.weatherMain.temp_max)) === null || _convertTemperature3 === void 0 ? void 0 : _convertTemperature3.toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${(_convertTemperature4 = convertTemperature(temperature.units, weather.weatherMain.temp_min)) === null || _convertTemperature4 === void 0 ? void 0 : _convertTemperature4.toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: getWeatherDescription(weather)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)]\n        }, nanoid(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }, this);\n  }\n\n  render() {\n    console.log(\"som v render\");\n    const currentWeathers = this.getWeathersOnSpecificPage();\n    const descriptions = internationalizeDescriptions(this.state.descriptions);\n    const countries = internationalizeCountries(this.state.countries); // let filters =     (\n    // this.state.filterComponent)\n\n    let filters = /*#__PURE__*/_jsxDEV(FiltersComponent, {\n      temperatureUnits: this.props.temperature.units,\n      countries: countries,\n      descriptions: internationalizeDescriptions(descriptions),\n      filters: this.state.filters,\n      onChangeMethod: this.onChangeFilter,\n      temperature: this.props.temperature\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 23\n    }, this);\n\n    const pagination = /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: this.state.currentPage,\n      showPages: this.state.showPages,\n      itemsPerPage: this.state.itemsPerPage,\n      totalItems: this.state.weathers.length,\n      paginate: this.paginate\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 28\n    }, this); // const temperatureDropdownListComponent = temperatureDropdownList( (units, abbreviation ) => {\n    // this.setState({\"temperature\": {\"units\" : units, \"abbreviation\" : abbreviation}})\n    // })\n\n\n    let container = [filters, pagination];\n    if (this.state.weathers) container.push( /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"weatherTable\",\n      children: [this.header(), this.mainBody(currentWeathers, this.props.temperature)]\n    }, nanoid(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 28\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WeatherCurrent;","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/components/current/WeatherCurrent.js"],"names":["React","WeatherCurrentService","Pagination","FiltersComponent","Link","internationalizeDescriptions","getWeatherDescription","convertTemperature","internationalizeCountries","keyExistsInArr","findIndexInFilters","nanoid","connect","saveFilter","i18n","WeatherCurrent","Component","constructor","props","console","log","temperature","addFilterOperatorToExistingFilterName","event","filterName","filterOperator","arr","state","filters","forEach","item","index","hasOwnProperty","onChangeFilter","setState","currentPage","isFilter","isAdditionalFilter","removeFilter","refreshWeathers","sortBy","weathers","concat","isAdditionalFilterCheck","createForecast","paginate","page","getWeathersOnSpecificPage","indexOfLastPost","itemsPerPage","indexOfFirstPost","slice","changeLanguage","language","isAscending","loading","pageNumbers","countries","descriptions","showPages","filterComponent","componentDidMount","retrieveAllCountries","retrieveAllDescriptions","data","units","retrieveAllWeathers","then","response","Object","keys","length","splice","isNotAdditionalFilterWithContains","isSameFilterChanged","includes","header","t","mainBody","currentPosts","map","weather","_id","pathname","coord","lat","lon","name","sys","countryName","weatherMain","humidity","feels_like","toFixed","abbreviation","temp","temp_max","temp_min","render","currentWeathers","pagination","container","push"],"mappings":"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","sourcesContent":["import React from 'react'\nimport WeatherCurrentService from '../../adapters/WeatherCurrentService';\nimport Pagination from '../current/Pagination'\nimport FiltersComponent from './Filters'\nimport { Link } from \"react-router-dom\";\nimport {internationalizeDescriptions, getWeatherDescription, convertTemperature, internationalizeCountries, keyExistsInArr, findIndexInFilters} from '../../businessLogic/WeatherBusinessLogic';\nimport '../../styles/common/Header.scss';\nimport { nanoid } from \"nanoid\";\nimport { connect } from 'react-redux';\nimport { saveFilter } from '../../actions';\nimport i18n from 'i18next'\n\nclass WeatherCurrent extends React.Component {\n    constructor(props) {\n        console.log(props.temperature)\n        super(props)\n        this.state = {\n            weathers: [],\n            isAscending: true,\n            filters: [],\n            isFilter : false,\n            currentPage : 1,\n            itemsPerPage : 1000,\n            loading : false,\n            isAdditionalFilter : false,\n            pageNumbers : [],\n            countries : [],\n            descriptions: [],\n            showPages: 5,\n            language: i18n.language,\n            filterComponent: null,\n            temperature: props.temperature\n        }\n    }\n\n    //I added temperatureDropdownList, filterscomponent and header here because I do not want to rerender them\n    //on every update. I cant use shouldComponentUpdate because they either are not components or are functional\n    //meaning they are stateless\n    async componentDidMount() {\n        console.log(\"componentDidMount\")\n        console.log(this.state.temperature)\n        const countries = await WeatherCurrentService.retrieveAllCountries()\n        const descriptions = await WeatherCurrentService.retrieveAllDescriptions()\n        this.setState({\n            countries : countries.data, \n            descriptions : (descriptions.data),\n            filterComponent: <FiltersComponent key={nanoid()} temperatureUnits = {this.state.temperature.units} countries = {internationalizeCountries(countries.data)}\n            descriptions = {internationalizeDescriptions(descriptions.data)} onChangeMethod={this.onChangeFilter} />\n        },\n            function() {this.refreshWeathers()}\n        )\n        \n    }\n    refreshWeathers(sortBy, weathers) {\n\n        WeatherCurrentService.retrieveAllWeathers(sortBy, this.state.isAscending, this.state.filters, this.state.isFilter, this.state.isAdditionalFilter, weathers)\n            .then(\n                response => {\n                    this.setState({ weathers: response.data })\n                }\n            ).then( () => {if (sortBy) this.setState({isAscending : !this.state.isAscending})}\n            ).then( () => {if (typeof this.state.filters !== 'undefined' && this.state.filters === 0) this.setState({isFilter : false})})\n    }\n\n    removeFilter(index, filterName, filterOperator) {\n        let arr = this.state.filters\n\n        if (arr[index][filterName][filterOperator])\n            delete arr[index][filterName][filterOperator]  \n        if (Object.keys(arr[index][filterName]).length === 0)\n            arr.splice(index, 1)\n        return arr\n    }\n\n    addFilterOperatorToExistingFilterName = (event, filterName, filterOperator) => {\n        const arr = this.state.filters\n        arr.forEach((item, index, filters) => {\n            if (item.hasOwnProperty([filterName])){\n                filters[index][filterName][filterOperator] = event\n            }\n        })\n        return arr\n    }\n\n    onChangeFilter = (event, filterName, filterOperator) => {\n        var index;\n\n        if (event === \"\" && keyExistsInArr(this.state.filters,filterName))  {\n\n            index = findIndexInFilters(this.state.filters, filterName)\n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : false, filters : this.removeFilter(index, filterName, filterOperator)}, function () {\n                this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n        }\n\n        else if (event !== \"\" && !(keyExistsInArr(this.state.filters, filterName))){\n\n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : true,\n                 filters: this.state.filters.concat([{[filterName]: {[filterOperator] : event}}])}, function () {\n                this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n\n        }\n\n        else if (event !== \"\" && (keyExistsInArr(this.state.filters, filterName))){\n           \n            index = findIndexInFilters(this.state.filters, filterName)\n\n            \n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : this.isAdditionalFilterCheck(event, index, filterName, filterOperator), \n                filters : this.addFilterOperatorToExistingFilterName(event, filterName, filterOperator)}, function() {\n                    this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n           \n        }\n        else {\n\n        }\n    }\n\n    isAdditionalFilterCheck(event, index, filterName, filterOperator){\n        if (this.isNotAdditionalFilterWithContains(event) === false)\n            return false\n        if (this.isSameFilterChanged(event, index, filterName, filterOperator) === false)\n            return false\n        return true\n                \n    }   \n\n    //if there are multiple countries and descriptions, backend must make a new query\n    //since no additional filter is added, only value. I am unable to send query request\n    //with an array element\n    isNotAdditionalFilterWithContains(event){\n       return event.includes(\",\") ? false : true\n    }\n    \n    // this check is here for times when I change the same filter multiple\n    // times in a row and the filter is same. If it is the same I cant filter\n    // from memory because I could not load some weathers\n    isSameFilterChanged(event, index, filterName, filterOperator){\n       return filterName === this.state.filters[index][filterName]\n    }\n    header(){\n       return (<thead className=\"header\">\n       <tr>\n           <th onClick={() =>this.refreshWeathers(\"_id\", this.state.weathers) }>{i18n.t(\"current.header.cityId\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"name\", this.state.weathers) }>{ i18n.t('current.header.cityName')}</th>\n           <th onClick={() =>this.refreshWeathers(\"coord.lat\", this.state.weathers) }>{i18n.t(\"current.header.latitude\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"coord.lon\", this.state.weathers) }>{i18n.t(\"current.header.longitude\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"sys.countryName\", this.state.weathers) }>{i18n.t(\"current.header.country\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.humidity\", this.state.weathers) }>{i18n.t(\"current.header.humidity\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.feels_like\", this.state.weathers) }>{i18n.t(\"current.header.feelsLike\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp\", this.state.weathers) }>{i18n.t(\"current.header.temperature\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp_max\", this.state.weathers) }>{i18n.t(\"current.header.maximumTemperature\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp_min\", this.state.weathers) }>{i18n.t(\"current.header.minimalTemperature\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weather.description\", this.state.weathers) }>{i18n.t(\"current.header.description\")}</th>                                \n       </tr>\n   </thead>)\n   }\n\ncreateForecast = ()=>{\n    return (\n        <Link  to= '/forecast'></Link>\n    );\n}\n\n   mainBody(currentPosts, temperature){\n       console.log(temperature.units)\n    return (\n\n    <tbody>\n        {\n            currentPosts.map(\n                weather =>{\n                    return (<tr key={nanoid()}>\n                        <td>{weather._id}</td>\n                        <td> <Link to={{pathname: \"/forecast\", state: {\"lat\": weather.coord.lat, \"lon\": weather.coord.lon} }}>{weather.name}</Link></td>\n                        <td>{weather.coord.lat}</td>\n                        <td>{weather.coord.lon}</td>\n                        <td>{i18n.t(`common.countryName.${weather.sys.countryName}`)}</td>\n                        <td>{weather.weatherMain.humidity}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.feels_like)?.toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.temp)?.toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.temp_max)?.toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.temp_min)?.toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{getWeatherDescription(weather)}</td>\n                    </tr>)}\n            )\n        }\n        </tbody>\n    )\n   }\n\n    paginate = (page) => {\n        // if(currentPage !== 0 && currentPage <= lastPage)\n       this.setState({currentPage : page}, function(){\n       })\n\n    }\n\n    getWeathersOnSpecificPage = () => {\n        const indexOfLastPost = this.state.currentPage * this.state.itemsPerPage;\n        const indexOfFirstPost = indexOfLastPost - this.state.itemsPerPage;\n        return this.state.weathers.slice(indexOfFirstPost, indexOfLastPost);\n    }\n\n    changeLanguage = (language, i18n) => {\n        i18n.changeLanguage(language);\n        this.setState({}, () =>{\n            this.setState({language: language})\n        })\n    };\n\n    render() {\n        console.log(\"som v render\")\n        const currentWeathers = this.getWeathersOnSpecificPage()\n        const descriptions = internationalizeDescriptions(this.state.descriptions)\n        const countries = internationalizeCountries(this.state.countries)\n        // let filters =     (\n            // this.state.filterComponent)\n        \n        let filters = <FiltersComponent key={nanoid()} temperatureUnits = {this.props.temperature.units} countries = {countries}\n            descriptions = {internationalizeDescriptions(descriptions)}\n            filters = {this.state.filters} onChangeMethod={this.onChangeFilter} temperature={this.props.temperature} />\n\n        const pagination = <Pagination key={nanoid()} currentPage={this.state.currentPage} showPages={this.state.showPages}\n        itemsPerPage = {this.state.itemsPerPage} totalItems = {this.state.weathers.length} paginate={this.paginate}/>\n\n        // const temperatureDropdownListComponent = temperatureDropdownList( (units, abbreviation ) => {\n            // this.setState({\"temperature\": {\"units\" : units, \"abbreviation\" : abbreviation}})\n        // })\n        let container= [filters, pagination]\n\n        if (this.state.weathers)\n            container.push(<table key={nanoid()} className=\"weatherTable\">\n                {this.header()}\n                {this.mainBody(currentWeathers, this.props.temperature)}\n            </table>\n            )\n\n        return (\n            <div className=\"container\">\n\n                {container}\n            </div>\n        )\n         \n    }\n}\nexport default WeatherCurrent\n"]},"metadata":{},"sourceType":"module"}