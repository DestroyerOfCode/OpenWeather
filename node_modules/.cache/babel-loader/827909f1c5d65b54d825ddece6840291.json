{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/components/current/WeatherCurrent.js\";\nimport React, { Component, PureComponent } from 'react';\nimport WeatherCurrentService from '../../adapters/WeatherCurrentService';\nimport Pagination from '../current/Pagination';\nimport FiltersComponent from './Filters';\nimport { Link } from \"react-router-dom\";\nimport { getWeatherDescription, convertTemperature } from '../../businessLogic/WeatherBusinessLogic';\nimport { temperatureDropdownList } from '../../buildingBlocks/commonBuildingBlocks';\nimport '../../styles/common/Header.scss';\nimport '../../styles/current/Filters.scss';\nimport { nanoid } from \"nanoid\";\nimport { withTranslation } from 'react-i18next';\nimport i18n from 'i18next';\n\nclass WeatherCurrent extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.internationalizeDescriptions = descriptions => {\n      return descriptions.map(description => ({\n        \"name\": i18n.t(\"common.description.\" + description.name),\n        \"id\": description.id,\n        \"originalValue\": description.name\n      }));\n    };\n\n    this.addFilterOperatorToExistingFilterName = (event, filterName, filterOperator) => {\n      const arr = this.state.filters;\n      arr.forEach((item, index, filters) => {\n        if (item.hasOwnProperty([filterName])) {\n          filters[index][filterName][filterOperator] = event;\n        }\n      });\n      return arr;\n    };\n\n    this.onChangeFilter = (event, filterName, filterOperator) => {\n      var index;\n\n      if (event === \"\" && this.keyExistsInArr(this.state.filters, filterName)) {\n        index = this.findIndexInFilters(this.state.filters, filterName);\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: false,\n          filters: this.changeFilters(index, filterName, filterOperator)\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else if (event !== \"\" && !this.keyExistsInArr(this.state.filters, filterName)) {\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: true,\n          filters: this.state.filters.concat([{\n            [filterName]: {\n              [filterOperator]: event\n            }\n          }])\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else if (event !== \"\" && this.keyExistsInArr(this.state.filters, filterName)) {\n        index = this.findIndexInFilters(this.state.filters, filterName);\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: this.isAdditionalFilterCheck(event, index, filterName, filterOperator),\n          filters: this.addFilterOperatorToExistingFilterName(event, filterName, filterOperator)\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else {}\n    };\n\n    this.createForecast = () => {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.paginate = page => {\n      // if(currentPage !== 0 && currentPage <= lastPage)\n      this.setState({\n        currentPage: page\n      }, function () {});\n    };\n\n    this.getWeathersOnSpecificPage = () => {\n      const indexOfLastPost = this.state.currentPage * this.state.itemsPerPage;\n      const indexOfFirstPost = indexOfLastPost - this.state.itemsPerPage;\n      return this.state.weathers.slice(indexOfFirstPost, indexOfLastPost);\n    };\n\n    this.changeLanguage = (language, i18n) => {\n      this.setState({\n        language: language\n      }, function (params) {\n        console.log(\"language: \" + language);\n      });\n      i18n.changeLanguage(language);\n    };\n\n    this.state = {\n      weathers: [],\n      isAscending: true,\n      filters: [],\n      isFilter: false,\n      currentPage: 1,\n      itemsPerPage: 1000,\n      loading: false,\n      isAdditionalFilter: false,\n      pageNumbers: [],\n      countries: [],\n      descriptions: [],\n      showPages: 5,\n      language: \"sk\",\n      filterComponent: null,\n      languageButtons: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: async () => this.changeLanguage(\"en\", i18n),\n          children: \"EN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: async () => this.changeLanguage(\"sk\", i18n),\n          children: \"SK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: async () => this.changeLanguage(\"de\", i18n),\n          children: \"DE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 30\n      }, this),\n      temperatureDropdownList: temperatureDropdownList((units, abbreviation) => {\n        this.setState({\n          \"temperature\": {\n            \"units\": units,\n            \"abbreviation\": abbreviation\n          }\n        });\n      }),\n      temperature: {\n        units: 'celsius',\n        abbreviation: 'Â°C'\n      }\n    };\n  } //I added temperatureDropdownList, filterscomponent and header here because I do not want to rerender them\n  //on every update. I cant use shouldComponentUpdate because they either are not components or are functional\n  //meaning they are stateless\n\n\n  async componentDidMount() {\n    const countries = await WeatherCurrentService.retrieveAllCountries();\n    const descriptions = await WeatherCurrentService.retrieveAllDescriptions();\n    this.setState({\n      countries: countries.data,\n      descriptions: descriptions.data,\n      filterComponent: /*#__PURE__*/_jsxDEV(FiltersComponent, {\n        temperatureUnits: this.state.temperature.units,\n        countries: countries.data,\n        descriptions: this.internationalizeDescriptions(descriptions.data),\n        language: this.state.language,\n        onChangeMethod: this.onChangeFilter\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 30\n      }, this)\n    }, function () {\n      this.refreshWeathers();\n    });\n  } // componentDidUpdate(){\n  //     this.setState({description = {this.internationalizeDescriptions}})\n  // }\n\n\n  refreshWeathers(sortBy, weathers) {\n    WeatherCurrentService.retrieveAllWeathers(sortBy, this.state.isAscending, this.state.filters, this.state.isFilter, this.state.isAdditionalFilter, weathers).then(response => {\n      this.setState({\n        weathers: response.data\n      });\n    }).then(() => {\n      if (sortBy) this.setState({\n        isAscending: !this.state.isAscending\n      });\n    }).then(() => {\n      if (typeof this.state.filters !== 'undefined' && this.state.filters === 0) this.setState({\n        isFilter: false\n      });\n    });\n  }\n\n  keyExistsInArr(arr, key) {\n    let exists = false;\n\n    if (!Array.isArray(key)) {\n      arr === null || arr === void 0 ? void 0 : arr.some(item => {\n        if (item.hasOwnProperty([key])) {\n          exists = true;\n          return true;\n        } else return false;\n      });\n    } //since countries and descriptions is a multicheckbox, they are arrays and it has multiple keys and must check not with equals\n    else {\n        arr === null || arr === void 0 ? void 0 : arr.some(item => {\n          if (item.includes([key])) {\n            exists = true;\n            return true;\n          } else return false;\n        });\n      }\n\n    return exists;\n  }\n\n  findIndexInFilters(arr, key) {\n    let indexOfKey = 0;\n    arr === null || arr === void 0 ? void 0 : arr.some((filterName, index, filters) => {\n      if (filterName.hasOwnProperty([key])) {\n        indexOfKey = index;\n        return indexOfKey;\n      } else return false;\n    });\n    return indexOfKey;\n  }\n\n  changeFilters(index, filterName, filterOperator) {\n    let arr = this.state.filters;\n    if (arr[index][filterName][filterOperator]) delete arr[index][filterName][filterOperator];\n    if (Object.keys(arr[index][filterName]).length === 0) arr.splice(index, 1);\n    return arr;\n  }\n\n  isAdditionalFilterCheck(event, index, filterName, filterOperator) {\n    if (this.isNotAdditionalFilterWithContains(event) === false) return false;\n    if (this.isSameFilterChanged(event, index, filterName, filterOperator) === false) return false;\n    return true;\n  } //if there are multiple countries and descriptions, backend must make a new query\n  //since no additional filter is added, only value. I am unable to send query request\n  //with an array element\n\n\n  isNotAdditionalFilterWithContains(event) {\n    return event.includes(\",\") ? false : true;\n  } // this check is here for times when I change the same filter multiple\n  // times in a row and the filter is same. If it is the same I cant filter\n  // from memory because I could not load some weathers\n\n\n  isSameFilterChanged(event, index, filterName, filterOperator) {\n    return filterName === this.state.filters[index][filterName];\n  }\n\n  header() {\n    return /*#__PURE__*/_jsxDEV(\"thead\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"_id\", this.state.weathers),\n          children: i18n.t(\"current.header.cityId\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"name\", this.state.weathers),\n          children: i18n.t('current.header.cityName')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"coord.lat\", this.state.weathers),\n          children: i18n.t(\"current.header.latitude\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"coord.lon\", this.state.weathers),\n          children: i18n.t(\"current.header.longitude\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"sys.country\", this.state.weathers),\n          children: i18n.t(\"current.header.country\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.humidity\", this.state.weathers),\n          children: i18n.t(\"current.header.humidity\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.feels_like\", this.state.weathers),\n          children: i18n.t(\"current.header.feelsLike\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp\", this.state.weathers),\n          children: i18n.t(\"current.header.temperature\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp_max\", this.state.weathers),\n          children: i18n.t(\"current.header.maximumTemperature\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp_min\", this.state.weathers),\n          children: i18n.t(\"current.header.minimalTemperature\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weather.description\", this.state.weathers),\n          children: i18n.t(\"current.header.description\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 16\n    }, this);\n  }\n\n  mainBody(currentPosts, temperature) {\n    return /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: currentPosts.map(weather => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Link, {\n              to: {\n                pathname: \"/forecast\",\n                state: {\n                  \"lat\": weather.coord.lat,\n                  \"lon\": weather.coord.lon\n                }\n              },\n              children: weather.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 30\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.coord.lat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.coord.lon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.sys.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.humidity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${convertTemperature(temperature.units, weather.weatherMain.feels_like).toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${convertTemperature(temperature.units, weather.weatherMain.temp).toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${convertTemperature(temperature.units, weather.weatherMain.temp_max).toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: `${convertTemperature(temperature.units, weather.weatherMain.temp_min).toFixed(2)}${temperature.abbreviation}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: getWeatherDescription(weather)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)]\n        }, nanoid(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }, this);\n  }\n\n  render() {\n    const currentWeathers = this.getWeathersOnSpecificPage();\n\n    const filters = /*#__PURE__*/_jsxDEV(FiltersComponent, {\n      temperatureUnits: this.state.temperature.units,\n      countries: this.state.countries,\n      descriptions: this.internationalizeDescriptions(this.state.descriptions),\n      onChangeMethod: this.onChangeFilter\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 31\n    }, this);\n\n    const pagination = /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: this.state.currentPage,\n      showPages: this.state.showPages,\n      itemsPerPage: this.state.itemsPerPage,\n      totalItems: this.state.weathers.length,\n      paginate: this.paginate\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 28\n    }, this);\n\n    const temperatureDropdown = this.state.temperatureDropdownList;\n    const languageButtons = this.state.languageButtons;\n    let container = [languageButtons, temperatureDropdown, filters, pagination];\n    if (this.state.weathers) container.push( /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"weatherTable\",\n      children: [this.header(), this.mainBody(currentWeathers, this.state.temperature)]\n    }, nanoid(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 28\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withTranslation()(WeatherCurrent);","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/components/current/WeatherCurrent.js"],"names":["React","Component","PureComponent","WeatherCurrentService","Pagination","FiltersComponent","Link","getWeatherDescription","convertTemperature","temperatureDropdownList","nanoid","withTranslation","i18n","WeatherCurrent","constructor","props","internationalizeDescriptions","descriptions","map","description","t","name","id","addFilterOperatorToExistingFilterName","event","filterName","filterOperator","arr","state","filters","forEach","item","index","hasOwnProperty","onChangeFilter","keyExistsInArr","findIndexInFilters","setState","currentPage","isFilter","isAdditionalFilter","changeFilters","refreshWeathers","sortBy","weathers","concat","isAdditionalFilterCheck","createForecast","paginate","page","getWeathersOnSpecificPage","indexOfLastPost","itemsPerPage","indexOfFirstPost","slice","changeLanguage","language","params","console","log","isAscending","loading","pageNumbers","countries","showPages","filterComponent","languageButtons","units","abbreviation","temperature","componentDidMount","retrieveAllCountries","retrieveAllDescriptions","data","retrieveAllWeathers","then","response","key","exists","Array","isArray","some","includes","indexOfKey","Object","keys","length","splice","isNotAdditionalFilterWithContains","isSameFilterChanged","header","mainBody","currentPosts","weather","_id","pathname","coord","lat","lon","sys","country","weatherMain","humidity","feels_like","toFixed","temp","temp_max","temp_min","render","currentWeathers","pagination","temperatureDropdown","container","push"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react'\nimport WeatherCurrentService from '../../adapters/WeatherCurrentService';\nimport Pagination from '../current/Pagination'\nimport FiltersComponent from './Filters'\nimport { Link } from \"react-router-dom\";\nimport {getWeatherDescription, convertTemperature} from '../../businessLogic/WeatherBusinessLogic';\nimport {temperatureDropdownList} from '../../buildingBlocks/commonBuildingBlocks'\nimport '../../styles/common/Header.scss';\nimport '../../styles/current/Filters.scss'\nimport { nanoid } from \"nanoid\";\nimport { withTranslation } from 'react-i18next';\nimport i18n from 'i18next'\n\nclass WeatherCurrent extends React.PureComponent {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weathers: [],\n            isAscending: true,\n            filters: [],\n            isFilter : false,\n            currentPage : 1,\n            itemsPerPage : 1000,\n            loading : false,\n            isAdditionalFilter : false,\n            pageNumbers : [],\n            countries : [],\n            descriptions: [],\n            showPages: 5,\n            language: \"sk\",\n            filterComponent: null,\n            languageButtons: <div>                               \n                <button onClick={async () => this.changeLanguage(\"en\", i18n)}>EN</button>\n                <button onClick={async () => this.changeLanguage(\"sk\", i18n)}>SK</button>   \n                <button onClick={async () => this.changeLanguage(\"de\", i18n)}>DE</button>   \n            </div>,\n            temperatureDropdownList: temperatureDropdownList( (units, abbreviation ) => {\n                this.setState({\"temperature\": {\"units\" : units, \"abbreviation\" : abbreviation}})\n            }),\n            temperature: {units: 'celsius', abbreviation: 'Â°C'},            \n        }\n    }\n\n    //I added temperatureDropdownList, filterscomponent and header here because I do not want to rerender them\n    //on every update. I cant use shouldComponentUpdate because they either are not components or are functional\n    //meaning they are stateless\n    async componentDidMount() {\n        const countries = await WeatherCurrentService.retrieveAllCountries()\n        const descriptions = await WeatherCurrentService.retrieveAllDescriptions()\n        this.setState({countries : countries.data, descriptions : (descriptions.data),\n            filterComponent: <FiltersComponent key={nanoid()} temperatureUnits = {this.state.temperature.units} countries = {countries.data}\n            descriptions = {this.internationalizeDescriptions(descriptions.data)} language= {this.state.language} onChangeMethod={this.onChangeFilter} />\n        },\n            function() {this.refreshWeathers()}\n        )\n        \n    }\n\n    // componentDidUpdate(){\n    //     this.setState({description = {this.internationalizeDescriptions}})\n    // }\n    internationalizeDescriptions = (descriptions) => {\n        return descriptions.map( (description) => (\n            {\"name\" : i18n.t(\"common.description.\" + description.name), \"id\": description.id, \"originalValue\" : description.name}\n        ))\n    }\n    refreshWeathers(sortBy, weathers) {\n\n        WeatherCurrentService.retrieveAllWeathers(sortBy, this.state.isAscending, this.state.filters, this.state.isFilter, this.state.isAdditionalFilter, weathers)\n            .then(\n                response => {\n                    this.setState({ weathers: response.data })\n                }\n            ).then( () => {if (sortBy) this.setState({isAscending : !this.state.isAscending})}\n            ).then( () => {if (typeof this.state.filters !== 'undefined' && this.state.filters === 0) this.setState({isFilter : false})})\n    }\n\n    keyExistsInArr(arr, key){\n        let exists = false\n        if (!Array.isArray(key)){\n            arr?.some(item => {\n                if(item.hasOwnProperty([key])) {\n                    exists = true;\n                    return true\n                }\n                else return false\n            })\n        }\n        //since countries and descriptions is a multicheckbox, they are arrays and it has multiple keys and must check not with equals\n        else{\n            arr?.some(item => {\n                if(item.includes([key])) {\n                    exists = true;\n                    return true\n                }\n                else return false\n            })\n        }\n        return exists\n    }\n\n    findIndexInFilters(arr, key){\n        let indexOfKey = 0\n        arr?.some((filterName, index, filters) => {\n            if(filterName.hasOwnProperty([key])){ \n                indexOfKey = index\n                return indexOfKey\n            }\n            else return false\n        })\n        return indexOfKey\n    }\n\n    changeFilters(index, filterName, filterOperator) {\n        let arr = this.state.filters\n\n        if (arr[index][filterName][filterOperator])\n            delete arr[index][filterName][filterOperator]  \n        if (Object.keys(arr[index][filterName]).length === 0)\n            arr.splice(index, 1)\n        return arr\n    }\n\n    addFilterOperatorToExistingFilterName = (event, filterName, filterOperator) => {\n        const arr = this.state.filters\n        arr.forEach((item, index, filters) => {\n            if (item.hasOwnProperty([filterName])){\n                filters[index][filterName][filterOperator] = event\n            }\n        })\n        return arr\n    }\n\n    onChangeFilter = (event, filterName, filterOperator) => {\n        var index;\n\n        if (event === \"\" && this.keyExistsInArr(this.state.filters,filterName))  {\n\n            index = this.findIndexInFilters(this.state.filters, filterName)\n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : false, filters : this.changeFilters(index, filterName, filterOperator)}, function () {\n                this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n        }\n\n        else if (event !== \"\" && !(this.keyExistsInArr(this.state.filters, filterName))){\n\n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : true,\n                 filters: this.state.filters.concat([{[filterName]: {[filterOperator] : event}}])}, function () {\n                this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n\n        }\n\n        else if (event !== \"\" && (this.keyExistsInArr(this.state.filters, filterName))){\n           \n            index = this.findIndexInFilters(this.state.filters, filterName)\n\n            \n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : this.isAdditionalFilterCheck(event, index, filterName, filterOperator), \n                filters : this.addFilterOperatorToExistingFilterName(event, filterName, filterOperator)}, function() {\n                    this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n           \n        }\n        else {\n\n        }\n    }\n\n    isAdditionalFilterCheck(event, index, filterName, filterOperator){\n        if (this.isNotAdditionalFilterWithContains(event) === false)\n            return false\n        if (this.isSameFilterChanged(event, index, filterName, filterOperator) === false)\n            return false\n        return true\n                \n    }   \n\n    //if there are multiple countries and descriptions, backend must make a new query\n    //since no additional filter is added, only value. I am unable to send query request\n    //with an array element\n    isNotAdditionalFilterWithContains(event){\n       return event.includes(\",\") ? false : true\n    }\n    \n    // this check is here for times when I change the same filter multiple\n    // times in a row and the filter is same. If it is the same I cant filter\n    // from memory because I could not load some weathers\n    isSameFilterChanged(event, index, filterName, filterOperator){\n       return filterName === this.state.filters[index][filterName]\n    }\n    header(){\n       return (<thead className=\"header\">\n       <tr>\n           <th onClick={() =>this.refreshWeathers(\"_id\", this.state.weathers) }>{i18n.t(\"current.header.cityId\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"name\", this.state.weathers) }>{ i18n.t('current.header.cityName')}</th>\n           <th onClick={() =>this.refreshWeathers(\"coord.lat\", this.state.weathers) }>{i18n.t(\"current.header.latitude\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"coord.lon\", this.state.weathers) }>{i18n.t(\"current.header.longitude\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"sys.country\", this.state.weathers) }>{i18n.t(\"current.header.country\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.humidity\", this.state.weathers) }>{i18n.t(\"current.header.humidity\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.feels_like\", this.state.weathers) }>{i18n.t(\"current.header.feelsLike\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp\", this.state.weathers) }>{i18n.t(\"current.header.temperature\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp_max\", this.state.weathers) }>{i18n.t(\"current.header.maximumTemperature\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp_min\", this.state.weathers) }>{i18n.t(\"current.header.minimalTemperature\")}</th>\n           <th onClick={() =>this.refreshWeathers(\"weather.description\", this.state.weathers) }>{i18n.t(\"current.header.description\")}</th>                                \n       </tr>\n   </thead>)\n   }\n\ncreateForecast = ()=>{\n    return (\n        <Link  to= '/forecast'></Link>\n    );\n}\n\n   mainBody(currentPosts, temperature){\n    return (\n\n    <tbody>\n        {\n            currentPosts.map(\n                weather =>{\n                    return (<tr key={nanoid()}>\n                        <td>{weather._id}</td>\n                        <td> <Link to={{pathname: \"/forecast\", state: {\"lat\": weather.coord.lat, \"lon\": weather.coord.lon} }}>{weather.name}</Link></td>\n                        <td>{weather.coord.lat}</td>\n                        <td>{weather.coord.lon}</td>\n                        <td>{weather.sys.country}</td>\n                        <td>{weather.weatherMain.humidity}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.feels_like).toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.temp).toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.temp_max).toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{`${convertTemperature(temperature.units, weather.weatherMain.temp_min).toFixed(2)}${temperature.abbreviation}`}</td>\n                        <td>{getWeatherDescription(weather)}</td>\n                    </tr>)}\n            )\n        }\n        </tbody>\n    )\n   }\n\n    paginate = (page) => {\n        // if(currentPage !== 0 && currentPage <= lastPage)\n       this.setState({currentPage : page}, function(){\n       })\n\n    }\n\n    getWeathersOnSpecificPage = () => {\n        const indexOfLastPost = this.state.currentPage * this.state.itemsPerPage;\n        const indexOfFirstPost = indexOfLastPost - this.state.itemsPerPage;\n        return this.state.weathers.slice(indexOfFirstPost, indexOfLastPost);\n    }\n\n    changeLanguage = (language, i18n) => {\n        this.setState({language: language}, function (params) {\n            console.log(\"language: \" + language)\n        })\n\n        i18n.changeLanguage(language);\n    };\n\n    render() {\n        const currentWeathers = this.getWeathersOnSpecificPage()\n        const filters =     ( <FiltersComponent key={nanoid()} temperatureUnits = {this.state.temperature.units} countries = {this.state.countries}\n        descriptions = {this.internationalizeDescriptions(this.state.descriptions)} onChangeMethod={this.onChangeFilter} />)\n\n        const pagination = <Pagination key={nanoid()} currentPage={this.state.currentPage} showPages={this.state.showPages}\n        itemsPerPage = {this.state.itemsPerPage} totalItems = {this.state.weathers.length} paginate={this.paginate}/>\n\n        const temperatureDropdown = this.state.temperatureDropdownList\n        const languageButtons = this.state.languageButtons\n\n        let container= [languageButtons, temperatureDropdown, filters, pagination]\n\n        if (this.state.weathers)\n            container.push(<table key={nanoid()} className=\"weatherTable\">\n                {this.header()}\n                {this.mainBody(currentWeathers, this.state.temperature)}\n            </table>\n            )\n\n        return (\n            <div className=\"container\">\n\n                {container}\n            </div>\n        )\n         \n    }\n}\nexport default withTranslation()(WeatherCurrent)\n"]},"metadata":{},"sourceType":"module"}