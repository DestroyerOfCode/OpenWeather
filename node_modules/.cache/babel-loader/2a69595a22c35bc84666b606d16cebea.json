{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/component/WeatherListComponent.js\";\nimport React, { Component } from 'react';\nimport WeatherService from '../service/WeatherService';\nimport Pagination from './Pagination';\nimport FiltersComponent from './FiltersComponent';\nimport { Multiselect } from 'multiselect-react-dropdown';\n\nclass WeatherListComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addFilterOperatorToExistingFilterName = (event, filterName, filterOperator) => {\n      const arr = this.state.filters;\n      arr.forEach((item, index, filters) => {\n        if (item.hasOwnProperty([filterName])) {\n          filters[index][filterName][filterOperator] = event;\n        }\n      });\n      return arr;\n    };\n\n    this.onChangeFilter = (event, filterName, filterOperator) => {\n      console.log(\"event: \" + JSON.stringify(event));\n      console.log(\"filters: \" + JSON.stringify(this.state.filters));\n\n      if (event === \"\" && this.keyExistsInArr(this.state.filters, filterName)) {\n        var index = this.findIndexInFilters(this.state.filters, filterName);\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: false,\n          filters: this.changeFilters(index, filterName, filterOperator)\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else if (event !== \"\" && !this.keyExistsInArr(this.state.filters, filterName)) {\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: true,\n          filters: this.state.filters.concat([{\n            [filterName]: {\n              [filterOperator]: event\n            }\n          }])\n        }, function () {\n          console.log(\"filters inside: \" + this.state.filters);\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else if (event !== \"\" && this.keyExistsInArr(this.state.filters, filterName)) {\n        //if there are multiple countries and descriptions, backend must make a new query\n        //since no additional filter is added, only value. I am unable to send query request\n        //with an array element\n        const isAdditionalFilterWithContains = event.includes(\",\") ? false : true;\n        this.setState({\n          currentPage: 1,\n          isFilter: true,\n          isAdditionalFilter: isAdditionalFilterWithContains,\n          filters: this.addFilterOperatorToExistingFilterName(event, filterName, filterOperator)\n        }, function () {\n          this.refreshWeathers(this.state.sortBy, this.state.weathers);\n        });\n      } else {\n        console.log(\"inside 4\");\n      }\n    };\n\n    this.getWeatherDescription = weather => {\n      var weatherItemReduce = (prevVal, currVal, idx) => {\n        return idx === 0 ? currVal.description : prevVal + \", \" + currVal.description;\n      };\n\n      return weather.weather.reduce(weatherItemReduce, '');\n    };\n\n    this.paginate = currentPage => {\n      this.setState({\n        currentPage: currentPage\n      }, function () {\n        console.log(\"currPage: \" + this.state.currentPage);\n      });\n    };\n\n    this.getWeathersOnSpecificPage = () => {\n      console.log('after pagination creation');\n      const indexOfLastPost = this.state.currentPage * this.state.itemsPerPage;\n      const indexOfFirstPost = indexOfLastPost - this.state.itemsPerPage;\n      return this.state.weathers.slice(indexOfFirstPost, indexOfLastPost);\n    };\n\n    this.state = {\n      weathers: [],\n      isAscending: true,\n      filters: [],\n      isFilter: false,\n      currentPage: 1,\n      itemsPerPage: 1000,\n      loading: false,\n      isAdditionalFilter: false,\n      pageNumbers: [],\n      countries: [],\n      descriptions: []\n    };\n  }\n\n  async componentDidMount() {\n    console.log(\"som v componentDidMOunt weather list\");\n    const countries = await WeatherService.retrieveAllCountries();\n    const descriptions = await WeatherService.retrieveAllDescriptions();\n    this.setState({\n      countries: countries.data,\n      descriptions: descriptions.data\n    }, function () {\n      this.refreshWeathers();\n    });\n  }\n\n  refreshWeathers(sortBy, weathers) {\n    WeatherService.retrieveAllWeathers(sortBy, this.state.isAscending, this.state.filters, this.state.isFilter, this.state.isAdditionalFilter, weathers).then(response => {\n      this.setState({\n        weathers: response.data\n      });\n    }).then(() => {\n      if (sortBy) this.setState({\n        isAscending: !this.state.isAscending\n      });\n    }).then(() => {\n      if (typeof this.state.filters !== 'undefined' && this.state.filters === 0) this.setState({\n        isFilter: false\n      });\n    });\n  }\n\n  keyExistsInArr(arr, key) {\n    let exists = false;\n    console.log(\"arr inside keyExists: \" + JSON.stringify(arr));\n\n    if (!Array.isArray(key)) {\n      arr === null || arr === void 0 ? void 0 : arr.some(item => {\n        if (item.hasOwnProperty([key])) {\n          exists = true;\n          return true;\n        } else return false;\n      });\n    } //since countries and descriptions is a multicheckbox, they are arrays and it has multiple keys and must check not with equals\n    else {\n        arr === null || arr === void 0 ? void 0 : arr.some(item => {\n          if (item.includes([key])) {\n            exists = true;\n            return true;\n          } else return false;\n        });\n      }\n\n    return exists;\n  }\n\n  findIndexInFilters(arr, key) {\n    let indexOfKey = 0;\n    arr === null || arr === void 0 ? void 0 : arr.some((filterName, index, filters) => {\n      if (filterName.hasOwnProperty([key])) {\n        indexOfKey = index;\n        return indexOfKey;\n      } else return false;\n    });\n    return indexOfKey;\n  }\n\n  changeFilters(index, filterName, filterOperator) {\n    let arr = this.state.filters;\n    console.log(\"arr inside changefilters: \" + JSON.stringify(arr));\n    if (arr[index][filterName][filterOperator]) delete arr[index][filterName][filterOperator];\n    if (Object.keys(arr[index][filterName]).length === 0) arr.splice(index, 1);\n    return arr;\n  }\n\n  header() {\n    return /*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"_id\", this.state.weathers),\n          children: \"cityId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"name\", this.state.weathers),\n          children: \"city Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"coord.lat\", this.state.weathers),\n          children: \"latitude\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"coord.lon\", this.state.weathers),\n          children: \"longitude\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"sys.country\", this.state.weathers),\n          children: \"country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.humidity\", this.state.weathers),\n          children: \"humidity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.feels_like\", this.state.weathers),\n          children: \"feels like\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp\", this.state.weathers),\n          children: \"temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp_max\", this.state.weathers),\n          children: \"maximum temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weatherMain.temp_min\", this.state.weathers),\n          children: \"minimal temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          onClick: () => this.refreshWeathers(\"weather.description\", this.state.weathers),\n          children: \"description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 16\n    }, this);\n  } // descriptions can be multiple per row, to display it I changed its elements to string delimetered by ','\n\n\n  mainBody(currentPosts) {\n    return /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: currentPosts.map(weather => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.coord.lat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.coord.lon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.sys.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.humidity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.feels_like\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.temp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.temp_max\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: weather.weatherMain.temp_min\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: this.getWeatherDescription(weather)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)]\n        }, weather._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }, this);\n  }\n\n  render() {\n    console.log(\"som v render weather list\");\n\n    const pagination = /*#__PURE__*/_jsxDEV(Pagination, {\n      itemsPerPage: this.state.itemsPerPage,\n      totalItems: this.state.weathers.length,\n      paginate: this.paginate.bind()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 28\n    }, this);\n\n    const currentWeathers = this.getWeathersOnSpecificPage();\n    console.log('curentWeathers: ' + JSON.stringify(currentWeathers));\n\n    const filters = /*#__PURE__*/_jsxDEV(FiltersComponent, {\n      countries: this.state.countries,\n      descriptions: this.state.descriptions,\n      onChangeMethod: this.onChangeFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 25\n    }, this);\n\n    let container = [filters, pagination];\n    if (this.state.weathers) container.push( /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [this.header(), this.mainBody(currentWeathers)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 28\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WeatherListComponent;","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/component/WeatherListComponent.js"],"names":["React","Component","WeatherService","Pagination","FiltersComponent","Multiselect","WeatherListComponent","constructor","props","addFilterOperatorToExistingFilterName","event","filterName","filterOperator","arr","state","filters","forEach","item","index","hasOwnProperty","onChangeFilter","console","log","JSON","stringify","keyExistsInArr","findIndexInFilters","setState","currentPage","isFilter","isAdditionalFilter","changeFilters","refreshWeathers","sortBy","weathers","concat","isAdditionalFilterWithContains","includes","getWeatherDescription","weather","weatherItemReduce","prevVal","currVal","idx","description","reduce","paginate","getWeathersOnSpecificPage","indexOfLastPost","itemsPerPage","indexOfFirstPost","slice","isAscending","loading","pageNumbers","countries","descriptions","componentDidMount","retrieveAllCountries","retrieveAllDescriptions","data","retrieveAllWeathers","then","response","key","exists","Array","isArray","some","indexOfKey","Object","keys","length","splice","header","mainBody","currentPosts","map","_id","name","coord","lat","lon","sys","country","weatherMain","humidity","feels_like","temp","temp_max","temp_min","render","pagination","bind","currentWeathers","container","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport WeatherService from '../service/WeatherService';\nimport Pagination from './Pagination';\nimport FiltersComponent from './FiltersComponent'\nimport { Multiselect } from 'multiselect-react-dropdown';\n\nclass WeatherListComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            weathers: [],\n            isAscending: true,\n            filters: [],\n            isFilter : false,\n            currentPage : 1,\n            itemsPerPage : 1000,\n            loading : false,\n            isAdditionalFilter : false,\n            pageNumbers : [],\n            countries : [],\n            descriptions: []\n        }\n    }\n\n    async componentDidMount() {\n        console.log(\"som v componentDidMOunt weather list\")\n        const countries = await WeatherService.retrieveAllCountries()\n        const descriptions = await WeatherService.retrieveAllDescriptions()\n        this.setState({countries : countries.data, descriptions : descriptions.data}, function() {this.refreshWeathers();})\n        \n    }\n\n    refreshWeathers(sortBy, weathers) {\n\n        WeatherService.retrieveAllWeathers(sortBy, this.state.isAscending, this.state.filters, this.state.isFilter, this.state.isAdditionalFilter, weathers)\n            .then(\n                response => {\n                    this.setState({ weathers: response.data })\n                }\n            ).then( () => {if (sortBy) this.setState({isAscending : !this.state.isAscending})}\n            ).then( () => {if (typeof this.state.filters !== 'undefined' && this.state.filters === 0) this.setState({isFilter : false})})\n    }\n\n    keyExistsInArr(arr, key){\n        let exists = false\n        console.log(\"arr inside keyExists: \" + JSON.stringify(arr))\n        if (!Array.isArray(key)){\n            arr?.some(item => {\n                if(item.hasOwnProperty([key])) {\n                    exists = true;\n                    return true\n                }\n                else return false\n            })\n        }\n        //since countries and descriptions is a multicheckbox, they are arrays and it has multiple keys and must check not with equals\n        else{\n            arr?.some(item => {\n                if(item.includes([key])) {\n                    exists = true;\n                    return true\n                }\n                else return false\n            })\n        }\n        return exists\n    }\n\n    findIndexInFilters(arr, key){\n        let indexOfKey = 0\n        arr?.some((filterName, index, filters) => {\n            if(filterName.hasOwnProperty([key])){ \n                indexOfKey = index\n                return indexOfKey\n            }\n            else return false\n        })\n        return indexOfKey\n    }\n\n    changeFilters(index, filterName, filterOperator) {\n        let arr = this.state.filters\n        console.log(\"arr inside changefilters: \" + JSON.stringify(arr))\n\n        if (arr[index][filterName][filterOperator])\n            delete arr[index][filterName][filterOperator]  \n        if (Object.keys(arr[index][filterName]).length === 0)\n            arr.splice(index, 1)\n        return arr\n    }\n\n    addFilterOperatorToExistingFilterName = (event, filterName, filterOperator) => {\n        const arr = this.state.filters\n        arr.forEach((item, index, filters) => {\n            if (item.hasOwnProperty([filterName])){\n                filters[index][filterName][filterOperator] = event\n            }\n        })\n        return arr\n    }\n\n    onChangeFilter = (event, filterName, filterOperator) => {\n        console.log(\"event: \" + JSON.stringify(event))\n        console.log(\"filters: \" + JSON.stringify(this.state.filters))\n\n        if (event === \"\" && this.keyExistsInArr(this.state.filters,filterName))  {\n            var index = this.findIndexInFilters(this.state.filters, filterName)\n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : false, filters : this.changeFilters(index, filterName, filterOperator)}, function () {\n                this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n        }\n\n        else if (event !== \"\" && !(this.keyExistsInArr(this.state.filters, filterName))){\n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : true,\n                 filters: this.state.filters.concat([{[filterName]: {[filterOperator] : event}}])}, function () {\n                console.log(\"filters inside: \" + this.state.filters)\n                this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n\n        }\n\n        else if (event !== \"\" && (this.keyExistsInArr(this.state.filters, filterName))){\n            //if there are multiple countries and descriptions, backend must make a new query\n            //since no additional filter is added, only value. I am unable to send query request\n            //with an array element\n            const isAdditionalFilterWithContains = event.includes(\",\") ? false : true\n            \n            this.setState({currentPage : 1, isFilter : true, isAdditionalFilter : isAdditionalFilterWithContains, \n                filters : this.addFilterOperatorToExistingFilterName(event, filterName, filterOperator)}, function() {\n                    this.refreshWeathers(this.state.sortBy, this.state.weathers)\n            })\n           \n        }\n        else {\n            console.log(\"inside 4\")\n\n        }\n    }\n\n   header(){\n       return (<thead>\n       <tr>\n           <th onClick={() =>this.refreshWeathers(\"_id\", this.state.weathers) }>cityId</th>\n           <th onClick={() =>this.refreshWeathers(\"name\", this.state.weathers) }>city Name</th>\n           <th onClick={() =>this.refreshWeathers(\"coord.lat\", this.state.weathers) }>latitude</th>\n           <th onClick={() =>this.refreshWeathers(\"coord.lon\", this.state.weathers) }>longitude</th>\n           <th onClick={() =>this.refreshWeathers(\"sys.country\", this.state.weathers) }>country</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.humidity\", this.state.weathers) }>humidity</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.feels_like\", this.state.weathers) }>feels like</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp\", this.state.weathers) }>temperature</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp_max\", this.state.weathers) }>maximum temperature</th>\n           <th onClick={() =>this.refreshWeathers(\"weatherMain.temp_min\", this.state.weathers) }>minimal temperature</th>\n           <th onClick={() =>this.refreshWeathers(\"weather.description\", this.state.weathers) }>description</th>                                \n       </tr>\n   </thead>)\n   }\n\n   // descriptions can be multiple per row, to display it I changed its elements to string delimetered by ','\n    getWeatherDescription = (weather) => {\n        var weatherItemReduce = (prevVal, currVal, idx) => {\n            return idx === 0 ? currVal.description : prevVal + \", \" + currVal.description;\n        }\n\n        return weather.weather.reduce(weatherItemReduce, '')\n    }\n\n\n\n   mainBody(currentPosts){\n    return (\n\n    <tbody>\n        {\n            currentPosts.map(\n                weather =>{\n                    return (<tr key={weather._id}>\n                        <td>{weather._id}</td>\n                        <td>{weather.name}</td>\n                        <td>{weather.coord.lat}</td>\n                        <td>{weather.coord.lon}</td>\n                        <td>{weather.sys.country}</td>\n                        <td>{weather.weatherMain.humidity}</td>\n                        <td>{weather.weatherMain.feels_like}</td>\n                        <td>{weather.weatherMain.temp}</td>\n                        <td>{weather.weatherMain.temp_max}</td>\n                        <td>{weather.weatherMain.temp_min}</td>\n                        <td>{this.getWeatherDescription(weather)}</td>\n                    </tr>)}\n            )\n        }\n        </tbody>\n    )\n   }\n\n    paginate = (currentPage) => {\n       this.setState({currentPage : currentPage}, function(){\n           console.log(\"currPage: \" + this.state.currentPage)\n       })\n\n    }\n\n    getWeathersOnSpecificPage = () => {\n        console.log('after pagination creation')\n        const indexOfLastPost = this.state.currentPage * this.state.itemsPerPage;\n        const indexOfFirstPost = indexOfLastPost - this.state.itemsPerPage;\n        return this.state.weathers.slice(indexOfFirstPost, indexOfLastPost);\n    }\n\n    render() {\n        console.log(\"som v render weather list\")\n\n        const pagination = <Pagination itemsPerPage = {this.state.itemsPerPage} totalItems = {this.state.weathers.length} paginate={this.paginate.bind()}/>\n\n        const currentWeathers = this.getWeathersOnSpecificPage()\nconsole.log('curentWeathers: ' + JSON.stringify(currentWeathers))\n        const filters = <FiltersComponent countries = {this.state.countries} descriptions = {this.state.descriptions} onChangeMethod={this.onChangeFilter} />\n        let container= [filters, pagination]\n\n        if (this.state.weathers)\n            container.push(<table className=\"table\">\n                {this.header()}\n                {this.mainBody(currentWeathers)}\n            </table>)\n\n        return (\n            <div className=\"container\">\n             {container}\n            </div>\n        )\n         \n    }\n}\nexport default WeatherListComponent\n"]},"metadata":{},"sourceType":"module"}