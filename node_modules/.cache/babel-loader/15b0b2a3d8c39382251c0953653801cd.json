{"ast":null,"code":"import axios from 'axios';\nconst COURSE_API_URL = 'http://localhost:8080';\nconst WEATHER_API_URL = `${COURSE_API_URL}/weather`;\n\nclass WeatherService {\n  retrieveAllWeathers(sortBy, isAscending, filters, filterOperator, weathers) {\n    //console.log('executed service')\n    console.log(\"Sort: \" + sortBy); // console.log(\"filter: \" + JSON.stringify(filters))\n\n    console.log(\"filterOperator: \" + filterOperator); // console.log(\"weathers : \" + (weathers))\n    // console.log(\"weathers stringified : \" + JSON.stringify(weathers))\n\n    let filtersString = \"\";\n\n    if (!filters.length) {\n      console.log(\"filters: \" + JSON.stringify(filters));\n    } else {\n      console.log(\"filter not: \" + JSON.stringify(filters));\n      console.log(\"filter not: \" + filters);\n      filters.forEach(item => {\n        filtersString += JSON.stringify(item);\n        filtersString += \",\";\n        console.log(\"item: \" + JSON.stringify(item));\n      }); // filters = JSON.stringify(filters)\n    }\n\n    console.log(\"filtersString: \" + filtersString);\n    if (!weathers) weathers = [];\n    const params = {\n      sortBy,\n      isAscending,\n      filtersString,\n      filterOperator\n    };\n    console.log(\"params: \" + JSON.stringify(params));\n    return axios.post(`${WEATHER_API_URL}/retrieve/fromDb`, weathers, {\n      params,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  onFilterBlur(event, filterName, filterOperator) {\n    if (event) {\n      if (this.state.filters.forEach(item => {\n        item.has(filterName);\n      })) this.state.filters.push({\n        filterName: event.target.value\n      });\n      this.refreshWeathers(this.state.sortBy, this.state.isAscending, filterOperator, this.state.weathers);\n    }\n  }\n\n  buildFilterParamString(filters) {\n    1;\n  }\n\n}\n\nexport default new WeatherService();","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/service/WeatherService.js"],"names":["axios","COURSE_API_URL","WEATHER_API_URL","WeatherService","retrieveAllWeathers","sortBy","isAscending","filters","filterOperator","weathers","console","log","filtersString","length","JSON","stringify","forEach","item","params","post","headers","onFilterBlur","event","filterName","state","has","push","target","value","refreshWeathers","buildFilterParamString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG,uBAAvB;AACA,MAAMC,eAAe,GAAI,GAAED,cAAe,UAA1C;;AAEA,MAAME,cAAN,CAAqB;AAEjBC,EAAAA,mBAAmB,CAACC,MAAD,EAASC,WAAT,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+CC,QAA/C,EAAyD;AACxE;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAUN,MAAtB,EAFwE,CAGxE;;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,cAAjC,EAJwE,CAKxE;AACA;;AACA,QAAII,aAAa,GAAC,EAAlB;;AACA,QAAG,CAACL,OAAO,CAACM,MAAZ,EAAmB;AACfH,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAcG,IAAI,CAACC,SAAL,CAAeR,OAAf,CAA1B;AAEH,KAHD,MAII;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBG,IAAI,CAACC,SAAL,CAAeR,OAAf,CAA7B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAkBJ,OAA9B;AACAA,MAAAA,OAAO,CAACS,OAAR,CAAkBC,IAAD,IAAS;AACtBL,QAAAA,aAAa,IAAGE,IAAI,CAACC,SAAL,CAAeE,IAAf,CAAhB;AACAL,QAAAA,aAAa,IAAI,GAAjB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAWG,IAAI,CAACC,SAAL,CAAeE,IAAf,CAAvB;AAEH,OALD,EAHA,CAUA;AACH;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAqBC,aAAjC;AACA,QAAG,CAACH,QAAJ,EACIA,QAAQ,GAAG,EAAX;AAEJ,UAAMS,MAAM,GAAG;AACXb,MAAAA,MADW;AACHC,MAAAA,WADG;AACUM,MAAAA,aADV;AACyBJ,MAAAA;AADzB,KAAf;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaG,IAAI,CAACC,SAAL,CAAeG,MAAf,CAAzB;AACA,WAAOlB,KAAK,CAACmB,IAAN,CAAY,GAAEjB,eAAgB,kBAA9B,EAAiDO,QAAjD,EAA0D;AAACS,MAAAA,MAAD;AAASE,MAAAA,OAAO,EAAE;AAC/E,wBAAgB;AAD+D;AAAlB,KAA1D,CAAP;AAGH;;AAGFC,EAAAA,YAAY,CAACC,KAAD,EAAQC,UAAR,EAAoBf,cAApB,EAAmC;AAC9C,QAAIc,KAAJ,EAAU;AACN,UAAG,KAAKE,KAAL,CAAWjB,OAAX,CAAmBS,OAAnB,CAA4BC,IAAI,IAAI;AAACA,QAAAA,IAAI,CAACQ,GAAL,CAASF,UAAT;AAAqB,OAA1D,CAAH,EACI,KAAKC,KAAL,CAAWjB,OAAX,CAAmBmB,IAAnB,CAAwB;AAACH,QAAAA,UAAU,EAAED,KAAK,CAACK,MAAN,CAAaC;AAA1B,OAAxB;AACR,WAAKC,eAAL,CAAqB,KAAKL,KAAL,CAAWnB,MAAhC,EAAwC,KAAKmB,KAAL,CAAWlB,WAAnD,EAAgEE,cAAhE,EAAgF,KAAKgB,KAAL,CAAWf,QAA3F;AACC;AAEA;;AACDqB,EAAAA,sBAAsB,CAACvB,OAAD,EAAS;AAC3B;AACH;;AAnDgB;;AAqDrB,eAAe,IAAIJ,cAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst COURSE_API_URL = 'http://localhost:8080'\nconst WEATHER_API_URL = `${COURSE_API_URL}/weather`\n\nclass WeatherService {\n\n    retrieveAllWeathers(sortBy, isAscending, filters, filterOperator, weathers) {\n        //console.log('executed service')\n        console.log(\"Sort: \" +sortBy)\n        // console.log(\"filter: \" + JSON.stringify(filters))\n        console.log(\"filterOperator: \" + filterOperator)\n        // console.log(\"weathers : \" + (weathers))\n        // console.log(\"weathers stringified : \" + JSON.stringify(weathers))\n        let filtersString=\"\"\n        if(!filters.length){\n            console.log(\"filters: \" + JSON.stringify(filters));\n       \n        }\n        else{\n            console.log(\"filter not: \" + JSON.stringify(filters))\n            console.log(\"filter not: \" + (filters))\n            filters.forEach( (item) =>{\n                filtersString+= JSON.stringify(item);\n                filtersString += \",\"\n                console.log(\"item: \" + JSON.stringify(item))\n\n            }\n            );\n            // filters = JSON.stringify(filters)\n        }\n        console.log(\"filtersString: \" + (filtersString))\n        if(!weathers)\n            weathers = []\n            \n        const params = {\n            sortBy, isAscending, filtersString, filterOperator\n        }\n\n        console.log(\"params: \" + JSON.stringify(params) )\n        return axios.post(`${WEATHER_API_URL}/retrieve/fromDb`, weathers,{params, headers: {\n            'Content-Type': 'application/json',\n        }});\n    }\n\n\n   onFilterBlur(event, filterName, filterOperator){\n    if (event){ \n        if(this.state.filters.forEach( item => {item.has(filterName)}))\n            this.state.filters.push({filterName: event.target.value}); \n    this.refreshWeathers(this.state.sortBy, this.state.isAscending, filterOperator, this.state.weathers)\n    }\n\n    }\n    buildFilterParamString(filters){\n        1;\n    }\n}\nexport default new WeatherService()\n"]},"metadata":{},"sourceType":"module"}