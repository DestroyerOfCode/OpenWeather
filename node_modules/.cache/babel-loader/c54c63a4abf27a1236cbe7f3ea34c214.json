{"ast":null,"code":"import axios from 'axios';\nconst COURSE_API_URL = 'http://localhost:8080';\nconst WEATHER_API_URL = `${COURSE_API_URL}/weather`;\n\nclass WeatherService {\n  retrieveAllWeathers(sortBy, isAscending, filters, filterOperator, isFilter, weathers) {\n    var filterString = this.buildFilterString(filters, filterOperator); // console.log(\"filters?.length: \" + filters?.length)\n    //    console.log(\"filters before POST: \" + JSON.stringify(filters))\n\n    if (!weathers) weathers = []; // console.log(\"weathers: \" + JSON.stringify(weathers))\n\n    const params = {\n      sortBy,\n      isAscending,\n      filterString,\n      isFilter,\n      filterOperator\n    }; // console.log(\"params: \" + JSON.stringify(params) )\n\n    console.log(\"filters: \" + JSON.stringify(filters));\n    console.log(\"filterString: \" + filterString);\n    return axios.post(`${WEATHER_API_URL}/retrieve/fromDb`, weathers, {\n      params\n    });\n  }\n\n  buildFilterString(filters, filterOperator) {\n    var filterString = \"\";\n\n    for (var i = 0; i <= (filters === null || filters === void 0 ? void 0 : filters.length) - 1; ++i) {\n      console.log(\"filteringNode : filters[i].filteringNode}): \" + JSON.stringify({\n        \"filteringNode\": filters[i].filteringNode\n      }));\n      filterString += JSON.stringify({\n        \"filteringNode\": filters[i].filteringNode\n      }); // if (filters[i+1])\n      // filterString += \",\"\n      // console.log(\"filters[i]: \" + JSON.stringify(filters[i]))\n    }\n\n    return filterString;\n  }\n\n}\n\nexport default new WeatherService();","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/service/WeatherService.js"],"names":["axios","COURSE_API_URL","WEATHER_API_URL","WeatherService","retrieveAllWeathers","sortBy","isAscending","filters","filterOperator","isFilter","weathers","filterString","buildFilterString","params","console","log","JSON","stringify","post","i","length","filteringNode"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG,uBAAvB;AACA,MAAMC,eAAe,GAAI,GAAED,cAAe,UAA1C;;AAEA,MAAME,cAAN,CAAqB;AAEjBC,EAAAA,mBAAmB,CAACC,MAAD,EAASC,WAAT,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+CC,QAA/C,EAAyDC,QAAzD,EAAmE;AAClF,QAAIC,YAAY,GAAG,KAAKC,iBAAL,CAAuBL,OAAvB,EAAgCC,cAAhC,CAAnB,CADkF,CAElF;AACJ;;AACI,QAAG,CAACE,QAAJ,EACIA,QAAQ,GAAG,EAAX,CAL8E,CAM9E;;AACJ,UAAMG,MAAM,GAAG;AACXR,MAAAA,MADW;AACHC,MAAAA,WADG;AACUK,MAAAA,YADV;AACwBF,MAAAA,QADxB;AACkCD,MAAAA;AADlC,KAAf,CAPkF,CAWlF;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAA1B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBJ,YAA/B;AAEA,WAAOX,KAAK,CAACkB,IAAN,CAAY,GAAEhB,eAAgB,kBAA9B,EAAiDQ,QAAjD,EAA0D;AAACG,MAAAA;AAAD,KAA1D,CAAP;AACH;;AAEDD,EAAAA,iBAAiB,CAACL,OAAD,EAAUC,cAAV,EAAyB;AACtC,QAAIG,YAAY,GAAG,EAAnB;;AACA,SAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAAAZ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEa,MAAT,IAAgB,CAApC,EAAuC,EAAED,CAAzC,EAA2C;AACvCL,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAiDC,IAAI,CAACC,SAAL,CAAe;AAAC,yBAAkBV,OAAO,CAACY,CAAD,CAAP,CAAWE;AAA9B,OAAf,CAA7D;AACAV,MAAAA,YAAY,IAAGK,IAAI,CAACC,SAAL,CAAe;AAAC,yBAAkBV,OAAO,CAACY,CAAD,CAAP,CAAWE;AAA9B,OAAf,CAAf,CAFuC,CAGvC;AACI;AACJ;AACH;;AACD,WAAOV,YAAP;AACH;;AA9BgB;;AAgCrB,eAAe,IAAIR,cAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst COURSE_API_URL = 'http://localhost:8080'\nconst WEATHER_API_URL = `${COURSE_API_URL}/weather`\n\nclass WeatherService {\n\n    retrieveAllWeathers(sortBy, isAscending, filters, filterOperator, isFilter, weathers) {\n        var filterString = this.buildFilterString(filters, filterOperator)\n        // console.log(\"filters?.length: \" + filters?.length)\n    //    console.log(\"filters before POST: \" + JSON.stringify(filters))\n        if(!weathers)\n            weathers = []\n            // console.log(\"weathers: \" + JSON.stringify(weathers))\n        const params = {\n            sortBy, isAscending, filterString, isFilter, filterOperator\n        }\n\n        // console.log(\"params: \" + JSON.stringify(params) )\n        console.log(\"filters: \" + JSON.stringify(filters))\n        console.log(\"filterString: \" + filterString)\n\n        return axios.post(`${WEATHER_API_URL}/retrieve/fromDb`, weathers,{params});\n    }\n\n    buildFilterString(filters, filterOperator){\n        var filterString = \"\"\n        for(var i = 0; i <= filters?.length-1; ++i){\n            console.log(\"filteringNode : filters[i].filteringNode}): \" + JSON.stringify({\"filteringNode\" : filters[i].filteringNode}))\n            filterString+= JSON.stringify({\"filteringNode\" : filters[i].filteringNode});\n            // if (filters[i+1])\n                // filterString += \",\"\n            // console.log(\"filters[i]: \" + JSON.stringify(filters[i]))\n        }\n        return filterString\n    }\n}\nexport default new WeatherService()\n"]},"metadata":{},"sourceType":"module"}