{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/component/WeatherForecastComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport WeatherForecastService from '../service/WeatherForecastService';\n\nasync function WeatherForecastComponent(props) {\n  _s();\n\n  var _WeatherForecastServi, _WeatherForecastServi2, _WeatherForecastServi3, _WeatherForecastServi4, _WeatherForecastServi5;\n\n  console.log(\"som vo forecast component\");\n  console.log(\"props: \" + JSON.stringify(props.history.location.state));\n  const [dailyWeatherForecast, setDailyWeatherForecast] = useState({}); // useEffect(async() =>{\n  //     ( async () => {\n  //         console.log(\"som v useEffect forecast component\")\n  //        console.log(\"func: \" )\n  //        const res = await WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \"Current,Hourly,Minutely\") \n  //        console.log(\"res: \" + JSON.stringify(res))\n  //     //    setDailyWeatherForecast(res);\n  //      }\n  // )(dailyWeatherForecast)}, [dailyWeatherForecast])\n  // setDailyWeatherForecast(getDailyWeatherForecast(props.history.location.state.lat, props.history.location.state.lon).data)\n\n  console.log(\"dailyWeatherForecast: \" + JSON.stringify(dailyWeatherForecast));\n  console.log(\"WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \\\"Current,Hourly,Minutely\\\")?.data?.daily?\" + JSON.stringify(await ((_WeatherForecastServi = WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \"Current,Hourly,Minutely\")) === null || _WeatherForecastServi === void 0 ? void 0 : (_WeatherForecastServi2 = _WeatherForecastServi.data) === null || _WeatherForecastServi2 === void 0 ? void 0 : _WeatherForecastServi2.daily)));\n  return /*#__PURE__*/_jsxDEV(\"tbody\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: await ((_WeatherForecastServi3 = WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \"Current,Hourly,Minutely\")) === null || _WeatherForecastServi3 === void 0 ? void 0 : (_WeatherForecastServi4 = _WeatherForecastServi3.data) === null || _WeatherForecastServi4 === void 0 ? void 0 : (_WeatherForecastServi5 = _WeatherForecastServi4.daily) === null || _WeatherForecastServi5 === void 0 ? void 0 : _WeatherForecastServi5.map(dailyWeather => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: dailyWeather.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this)\n        }, dailyWeather.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WeatherForecastComponent, \"TCZ8zoQGr6eCRseIRMcmyY2YhrM=\");\n\n_c = WeatherForecastComponent;\n\nconst getDailyWeatherForecast = async (lat, lon) => {\n  console.log(\"som v metode getDailyWeatherForecast\");\n  const dailyWeatherForecastFunc = await WeatherForecastService.getDailyForecastByCityName(lat, lon, \"Current,Hourly,Minutely\");\n  console.log(\"dailyWeatherForecastFunc: \" + JSON.stringify(dailyWeatherForecastFunc));\n  return dailyWeatherForecastFunc;\n};\n\nexport default WeatherForecastComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecastComponent\");","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/component/WeatherForecastComponent.js"],"names":["React","useState","useEffect","WeatherForecastService","WeatherForecastComponent","props","console","log","JSON","stringify","history","location","state","dailyWeatherForecast","setDailyWeatherForecast","getDailyForecastByCityName","lat","lon","data","daily","map","dailyWeather","id","getDailyWeatherForecast","dailyWeatherForecastFunc"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;;AAEC,eAAeC,wBAAf,CAAwCC,KAAxC,EAA8C;AAAA;;AAAA;;AAE3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAtC,CAAxB;AAEA,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDb,QAAQ,CAAC,EAAD,CAAhE,CAL2C,CAO3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BC,IAAI,CAACC,SAAL,CAAeI,oBAAf,CAAvC;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,qKACZC,IAAI,CAACC,SAAL,CAAe,gCAAMN,sBAAsB,CAACY,0BAAvB,CAAkDV,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAvB,CAA6BI,GAA/E,EAAoFX,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAvB,CAA6BK,GAAjH,EAAsH,yBAAtH,CAAN,oFAAM,sBAAkJC,IAAxJ,2DAAM,uBAAwJC,KAA9J,CAAf,CADA;AAEA,sBACA;AAAA,2BACI;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA,gBACK,iCAAMhB,sBAAsB,CAACY,0BAAvB,CAAkDV,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAvB,CAA6BI,GAA/E,EAAoFX,KAAK,CAACK,OAAN,CAAcC,QAAd,CAAuBC,KAAvB,CAA6BK,GAAjH,EAAsH,yBAAtH,CAAN,qFAAM,uBAAkJC,IAAxJ,qFAAM,uBAAwJC,KAA9J,2DAAM,uBAA+JC,GAA/J,CAAmKC,YAAY,IAAG;AACrL,4BACI;AAAA,iCACI;AAAA,sBAAKA,YAAY,CAACC;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ,WAAWD,YAAY,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAIH,OALM,CAAN;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAWH;;GAhCelB,wB;;KAAAA,wB;;AAkChB,MAAMmB,uBAAuB,GAAG,OAAOP,GAAP,EAAYC,GAAZ,KAAoB;AAChDX,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,QAAMiB,wBAAwB,GAAG,MAAMrB,sBAAsB,CAACY,0BAAvB,CAAkDC,GAAlD,EAAuDC,GAAvD,EAA4D,yBAA5D,CAAvC;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BC,IAAI,CAACC,SAAL,CAAee,wBAAf,CAA3C;AACA,SAAOA,wBAAP;AACH,CALD;;AAMA,eAAepB,wBAAf","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport WeatherForecastService from '../service/WeatherForecastService';\n\n async function WeatherForecastComponent(props){\n\n    console.log(\"som vo forecast component\")\n    console.log(\"props: \" + JSON.stringify(props.history.location.state))\n\n    const [dailyWeatherForecast, setDailyWeatherForecast] = useState({} )\n    \n    // useEffect(async() =>{\n    //     ( async () => {\n    //         console.log(\"som v useEffect forecast component\")\n    //        console.log(\"func: \" )\n    //        const res = await WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \"Current,Hourly,Minutely\") \n    //        console.log(\"res: \" + JSON.stringify(res))\n    //     //    setDailyWeatherForecast(res);\n    //      }\n    // )(dailyWeatherForecast)}, [dailyWeatherForecast])\n\n    // setDailyWeatherForecast(getDailyWeatherForecast(props.history.location.state.lat, props.history.location.state.lon).data)\n    console.log(\"dailyWeatherForecast: \" + JSON.stringify(dailyWeatherForecast))\n    console.log(\"WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \\\"Current,Hourly,Minutely\\\")?.data?.daily?\" +\n    JSON.stringify(await WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \"Current,Hourly,Minutely\")?.data?.daily))\n    return (\n    <tbody>\n        <table className=\"table\">\n            {await WeatherForecastService.getDailyForecastByCityName(props.history.location.state.lat, props.history.location.state.lon, \"Current,Hourly,Minutely\")?.data?.daily?.map(dailyWeather =>{\n                return( \n                    <tr key ={ dailyWeather.id}>\n                        <td>{dailyWeather.id}</td>\n                    </tr>)\n            })}\n        </table>\n    </tbody>)\n}\n\nconst getDailyWeatherForecast = async (lat, lon) => {\n    console.log(\"som v metode getDailyWeatherForecast\")\n    const dailyWeatherForecastFunc = await WeatherForecastService.getDailyForecastByCityName(lat, lon, \"Current,Hourly,Minutely\")\n    console.log(\"dailyWeatherForecastFunc: \" + JSON.stringify(dailyWeatherForecastFunc))\n    return dailyWeatherForecastFunc\n}\nexport default WeatherForecastComponent"]},"metadata":{},"sourceType":"module"}