{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/components/current/Filters.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport '../../styles/current/Filters.scss';\nimport { convertTemperature } from '../../businessLogic/WeatherBusinessLogic';\nimport i18n from 'i18next';\n\nfunction FiltersComponent(props) {\n  _s();\n\n  //TODO find out how to call setMethod in buildFilter function\n  const [filterKey, setFilterKey] = useState(\"\");\n  const [filtervalue, setFilterValue] = useState(\"\");\n  const [filterOperator, setFilterOperator] = useState(\"\");\n  useEffect(() => {\n    const timeOutId = setTimeout(() => props.onChangeMethod(filtervalue, filterKey, filterOperator), 500);\n    return () => clearTimeout(timeOutId);\n  }, [filterKey, filtervalue, filterOperator, props]);\n  console.log(props.countries);\n\n  var buildFilter = (filterValue, filterKey, filterOperator) => {\n    setFilterValue(filterValue);\n    setFilterKey(filterKey);\n    setFilterOperator(filterOperator);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"currentFiltersWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.latitude\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"coord.lat\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"coord.lat\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"coord.lat\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"coord.lat\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.longitude\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"coord.lon\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"coord.lon\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"coord.lon\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"coord.lon\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.humidity\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.humidity\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"weatherMain.humidity\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.humidity\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"weatherMain.humidity\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.feelTemperature\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.feels_like\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.feels_like\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.feels_like\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.feels_like\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.temperatureMax\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_max\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_max\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_max\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_max\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.temperatureMin\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_min\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_min\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_min\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_min\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.temperature\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: {\n            width: \"90px\"\n          },\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.temp\", \"gte\"),\n          placeholder: i18n.t(\"common.from\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp\", \"gte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          style: {\n            width: \"90px\"\n          },\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"weatherMain.temp\", \"lte\"),\n          placeholder: i18n.t(\"common.to\"),\n          onChange: event => {\n            buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp\", \"lte\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [i18n.t(\"current.filters.cityName\"), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          defaultValue: getOriginalValue(props.filters, props.temperature, \"name\", \"eq\"),\n          placeholder: i18n.t(\"current.filters.cityName\"),\n          onChange: event => {\n            buildFilter(event.target.value, \"name\", \"eq\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n      selectedValues: getSelectedDescriptions(props.filters, \"weather.description\", \"in\", setTimeout(() => {\n        props.descriptions;\n      })),\n      placeholder: i18n.t(\"current.filters.pickDescriptions\"),\n      options: setTimeout(() => {\n        props.descriptions;\n      }),\n      displayValue: \"name\",\n      showCheckbox: true,\n      onSelect: event => {\n        buildFilter(makeStringFromDescriptions(event), \"weather.description\", \"in\");\n      },\n      onRemove: event => {\n        buildFilter(makeStringFromDescriptions(event), \"weather.description\", \"in\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Multiselect, {\n      selectedValues: getSelectedCountries(props.filters, \"sys.countryName\", \"in\", setTimeout(() => {\n        props.countries;\n      })),\n      placeholder: i18n.t(\"current.filters.pickCountries\"),\n      options: setTimeout(() => {\n        props.countries;\n      }),\n      displayValue: \"countryName\",\n      onSelect: event => {\n        buildFilter(makeStringFromCountries(event), \"sys.countryName\", \"in\");\n      },\n      onRemove: event => {\n        buildFilter(makeStringFromCountries(event), \"sys.countryName\", \"in\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FiltersComponent, \"zZRYoqm3bb8s4MlYdjRloDPx4qQ=\");\n\n_c = FiltersComponent;\n\nconst getSelectedDescriptions = (filters, filterKey, filterOperator, descriptions) => {\n  let retArr = [];\n  filters.some(filter => {\n    if (filterKey in filter && filterOperator in filter[filterKey]) {\n      filter[filterKey][filterOperator].split(\",\").forEach(description => {\n        let originalValue = \"\";\n        descriptions.some(item => {\n          if (description === item.originalValue) {\n            originalValue = item.originalValue;\n            return true;\n          }\n\n          return false;\n        });\n        retArr.push({\n          \"name\": i18n.t(`common.description.${description}`),\n          \"originalValue\": originalValue\n        });\n      });\n      return true;\n    }\n\n    return false;\n  });\n  return retArr;\n};\n\nconst getSelectedCountries = (filters, filterKey, filterOperator, countries) => {\n  let retArr = [];\n  filters.some(filter => {\n    if (filterKey in filter && filterOperator in filter[filterKey]) {\n      filter[filterKey][filterOperator].split(\",\").forEach(countryName => {\n        let originalValue = \"\";\n        countries.some(item => {\n          console.log(countryName);\n          console.log(item.originalCountryName);\n\n          if (countryName === item.originalCountryName) {\n            originalValue = item.originalCountryName;\n            return true;\n          }\n\n          return false;\n        });\n        console.log(originalValue);\n        retArr.push({\n          \"countryName\": i18n.t(`common.countryName.${originalValue}`),\n          \"originalCountryName\": originalValue\n        });\n      });\n      return true;\n    }\n\n    return false;\n  });\n  console.log(retArr);\n  return retArr;\n};\n\nconst getOriginalValue = (filter, temperature, filterKey, filterOperator) => {\n  let ret = \"\";\n  const temperatureKeys = [\"weatherMain.feels_like\", \"weatherMain.temp\", \"weatherMain.temp_max\", \"weatherMain.temp_min\"]; // if (translationKey !== \"pickDescriptions\" && translationKey !== \"pickCountries\")\n\n  filter.some(item => {\n    // console.log( filterKey in item)\n    if (filterKey in item && filterOperator in item[filterKey]) {\n      if (temperatureKeys.includes(Object.keys(item)[0])) ret = Number(convertTemperature(temperature.units, item[filterKey][filterOperator])).toFixed(2);else ret = item[filterKey][filterOperator];\n      return true;\n    } else return false;\n  });\n  if (ret !== \"\") return ret;\n  return;\n}; // In db values are in kelvin. The user can change it on the UI.\n// I must convert to same units\n\n\nconst calculateKelvins = (temperatureUnits, temperatureValue) => {\n  if (temperatureValue === \"\") return \"\";\n  if (temperatureUnits === 'celsius') return (parseFloat(temperatureValue) + 273.15).toString();\n  if (temperatureUnits === 'fahrenheit') return ((parseFloat(temperatureValue) + 459.67) * 5 / 9).toString();\n  return temperatureValue;\n}; // this closure's purpose is to create strings to be sent to query params, as no \n// other way to send arrays exists\n\n\nconst makeStringFromDescriptions = items => {\n  var selectedItemsIntoString = (prevVal, currVal, idx) => {\n    return idx === 0 ? currVal.originalValue : prevVal + \",\" + currVal.originalValue;\n  };\n\n  return items.reduce(selectedItemsIntoString, '');\n};\n\nconst makeStringFromCountries = items => {\n  var selectedItemsIntoString = (prevVal, currVal, idx) => {\n    return idx === 0 ? currVal.originalCountryName : prevVal + \",\" + currVal.originalCountryName;\n  };\n\n  return items.reduce(selectedItemsIntoString, '');\n};\n\nexport default FiltersComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"FiltersComponent\");","map":{"version":3,"sources":["/home/prepelicamangalica/WorkspaceGit/SuperProjekt/src/main/ui/src/components/current/Filters.js"],"names":["React","useState","useEffect","Multiselect","convertTemperature","i18n","FiltersComponent","props","filterKey","setFilterKey","filtervalue","setFilterValue","filterOperator","setFilterOperator","timeOutId","setTimeout","onChangeMethod","clearTimeout","console","log","countries","buildFilter","filterValue","t","getOriginalValue","filters","temperature","event","target","value","calculateKelvins","temperatureUnits","width","getSelectedDescriptions","descriptions","makeStringFromDescriptions","getSelectedCountries","makeStringFromCountries","retArr","some","filter","split","forEach","description","originalValue","item","push","countryName","originalCountryName","ret","temperatureKeys","includes","Object","keys","Number","units","toFixed","temperatureValue","parseFloat","toString","items","selectedItemsIntoString","prevVal","currVal","idx","reduce"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from \"react\";\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport '../../styles/current/Filters.scss'\nimport {convertTemperature} from '../../businessLogic/WeatherBusinessLogic'\nimport i18n from 'i18next'\n\nfunction FiltersComponent(props) {\n   \n    //TODO find out how to call setMethod in buildFilter function\n    const [filterKey, setFilterKey] = useState(\"\")\n    const [filtervalue, setFilterValue] = useState(\"\");\n    const [filterOperator, setFilterOperator] = useState(\"\");\n\n    useEffect(() => {\n        const timeOutId = setTimeout(() => props.onChangeMethod(filtervalue, filterKey, filterOperator), 500);\n        return () => clearTimeout(timeOutId);\n    }, [filterKey, filtervalue, filterOperator, props]);\n    console.log(props.countries)\n    var buildFilter = (filterValue, filterKey, filterOperator) => {\n        setFilterValue(filterValue); setFilterKey(filterKey); setFilterOperator(filterOperator)\n    }\n        return (\n        <form className=\"currentFiltersWrapper\">\n            <div >\n                <label>\n                    {i18n.t(\"current.filters.latitude\")}\n                    <input type=\"number\" defaultValue={getOriginalValue(props.filters, props.temperature, \"coord.lat\", \"gte\")} placeholder= {i18n.t(\"common.from\")} onChange= {event =>{buildFilter(event.target.value, \"coord.lat\", \"gte\")}}/>\n                    <input type=\"number\" defaultValue={getOriginalValue(props.filters, props.temperature, \"coord.lat\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(event.target.value, \"coord.lat\", \"lte\")}}></input>\n                </label>\n                <label>\n                    {i18n.t(\"current.filters.longitude\")}\n                    <input type=\"number\" defaultValue={getOriginalValue(props.filters, props.temperature, \"coord.lon\", \"gte\")} placeholder= {i18n.t(\"common.from\") } onChange= {event =>{buildFilter(event.target.value, \"coord.lon\", \"gte\")}}></input>\n                    <input type=\"number\" defaultValue={getOriginalValue(props.filters, props.temperature, \"coord.lon\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(event.target.value, \"coord.lon\", \"lte\")}}></input>\n                </label>\n                <label>\n                    {i18n.t(\"current.filters.humidity\")}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.humidity\", \"gte\")} placeholder= {i18n.t(\"common.from\") } onChange= {event =>{buildFilter(event.target.value, \"weatherMain.humidity\", \"gte\")}}></input>}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.humidity\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(event.target.value, \"weatherMain.humidity\", \"lte\")}}></input>}\n                </label>\n                <label>\n                    {i18n.t(\"current.filters.feelTemperature\")}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.feels_like\", \"gte\")} placeholder= {i18n.t(\"common.from\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.feels_like\", \"gte\")}}></input>}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.feels_like\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.feels_like\", \"lte\")}}></input>}\n                </label>\n                <label>\n                    {i18n.t(\"current.filters.temperatureMax\")}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_max\", \"gte\")} placeholder= {i18n.t(\"common.from\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_max\", \"gte\")}}></input>}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_max\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_max\", \"lte\")}}></input>}\n                </label>\n                <label>\n                    {i18n.t(\"current.filters.temperatureMin\")}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_min\", \"gte\")} placeholder= {i18n.t(\"common.from\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_min\", \"gte\")}}></input>}\n                    {<input type=\"number\"defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.temp_min\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp_min\", \"lte\")}}></input>}\n                </label>\n                <label>\n                    {i18n.t(\"current.filters.temperature\")}\n                    {<input type=\"number\"style={{width: \"90px\"}} defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.temp\", \"gte\")} placeholder= {i18n.t(\"common.from\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp\", \"gte\")}}></input>}\n                    {<input type=\"number\"style={{width: \"90px\"}} defaultValue={getOriginalValue(props.filters, props.temperature, \"weatherMain.temp\", \"lte\")} placeholder= {i18n.t(\"common.to\") } onChange= {event =>{buildFilter(calculateKelvins(props.temperatureUnits, event.target.value), \"weatherMain.temp\", \"lte\")}}></input>}\n                </label>\n                <label> \n                    {i18n.t(\"current.filters.cityName\")}\n                    <input type=\"text\" defaultValue={getOriginalValue(props.filters, props.temperature, \"name\", \"eq\")} placeholder= {i18n.t(\"current.filters.cityName\") } onChange= {event =>{buildFilter(event.target.value, \"name\", \"eq\")}}/>\n                </label>\n            </div>\n            {<Multiselect selectedValues={getSelectedDescriptions(props.filters, \"weather.description\", \"in\", setTimeout(() => { props.descriptions}))} placeholder={i18n.t(\"current.filters.pickDescriptions\")} options = {setTimeout(() => { props.descriptions})} displayValue='name' showCheckbox={true} onSelect={event =>{buildFilter(makeStringFromDescriptions(event), \"weather.description\", \"in\")}}\n            onRemove={event =>{buildFilter(makeStringFromDescriptions(event), \"weather.description\", \"in\")}}/>}\n                {<Multiselect selectedValues={getSelectedCountries(props.filters, \"sys.countryName\", \"in\", setTimeout(() => { props.countries}))} placeholder={i18n.t(\"current.filters.pickCountries\")} options ={setTimeout(() => { props.countries})} displayValue='countryName'  onSelect={event =>{buildFilter(makeStringFromCountries(event), \"sys.countryName\", \"in\")}}\n            onRemove={event =>{buildFilter(makeStringFromCountries(event), \"sys.countryName\", \"in\")}}/>}\n        </form>\n        )\n}\n\nconst getSelectedDescriptions= (filters, filterKey, filterOperator, descriptions) =>{\n    let retArr= []\n    filters.some((filter) => {\n        if (filterKey in filter && filterOperator in filter[filterKey]){\n            filter[filterKey][filterOperator].split(\",\").forEach((description) => {\n                let originalValue = \"\"\n                descriptions.some((item) => {\n                    if(description === item.originalValue){\n                        originalValue = item.originalValue\n                        return true;\n                    } return false\n                })\n                retArr.push({\"name\": i18n.t(`common.description.${description}`), \"originalValue\": originalValue})\n            })\n            return true;\n        }\n        return false;\n    })\n    return retArr\n}\nconst getSelectedCountries= (filters, filterKey, filterOperator, countries) =>{\n    let retArr = []\n    filters.some((filter) =>{\n        if (filterKey in filter && filterOperator in filter[filterKey]){\n            filter[filterKey][filterOperator].split(\",\").forEach((countryName) => {\n                let originalValue = \"\"\n                countries.some((item) => {\n                    console.log(countryName)\n                    console.log(item.originalCountryName)\n                    if (countryName === item.originalCountryName){\n                        originalValue = item.originalCountryName\n                        return true;\n                    } return false;\n                })\n                console.log(originalValue)\n                retArr.push({\"countryName\": i18n.t(`common.countryName.${originalValue}`), \"originalCountryName\": originalValue})\n            })\n            return true;\n        }\n        return false;\n    })\n    console.log(retArr)\n    return retArr\n}\nconst getOriginalValue = (filter, temperature, filterKey, filterOperator) => {\n    let ret = \"\"\n    const temperatureKeys= [\n        \"weatherMain.feels_like\",\n        \"weatherMain.temp\",\n        \"weatherMain.temp_max\",\n        \"weatherMain.temp_min\"\n    ]\n    // if (translationKey !== \"pickDescriptions\" && translationKey !== \"pickCountries\")\n    filter.some((item) => {\n        // console.log( filterKey in item)\n        if ( filterKey in item && filterOperator in item[filterKey]) {\n            if (temperatureKeys.includes(Object.keys(item)[0]))\n                ret = Number(convertTemperature(temperature.units, item[filterKey][filterOperator])).toFixed(2)\n            else ret = item[filterKey][filterOperator]\n            return true;\n        }\n        else return false\n    })\n    if(ret !== \"\")\n        return ret;\n    return;\n}\n\n// In db values are in kelvin. The user can change it on the UI.\n// I must convert to same units\nconst calculateKelvins = (temperatureUnits, temperatureValue) => {\n    if(temperatureValue === \"\")\n        return \"\"\n    if (temperatureUnits === 'celsius')\n        return (parseFloat(temperatureValue) + 273.15).toString()\n    if (temperatureUnits === 'fahrenheit')\n        return (((parseFloat(temperatureValue) + 459.67) * 5) / 9).toString()\n    return temperatureValue\n}\n\n// this closure's purpose is to create strings to be sent to query params, as no \n// other way to send arrays exists\nconst makeStringFromDescriptions= (items) => {\n    var selectedItemsIntoString = (prevVal, currVal, idx) => {\n        return idx === 0 ? currVal.originalValue : prevVal + \",\" + currVal.originalValue\n    }\n    return items.reduce(selectedItemsIntoString, '')\n}\nconst makeStringFromCountries= (items) => {\n    var selectedItemsIntoString = (prevVal, currVal, idx) => {\n        return idx === 0 ? currVal.originalCountryName : prevVal + \",\" + currVal.originalCountryName\n    }\n    return items.reduce(selectedItemsIntoString, '')\n}\nexport default FiltersComponent"]},"metadata":{},"sourceType":"module"}